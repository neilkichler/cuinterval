# SPDX-License-Identifier: MIT
# Document generator. Requires Python 3.9+

import glob
import re
import sys
import os

from collections import defaultdict

indent_one = ' ' * 4
indent_two = ' ' * 8
indent_three = ' ' * 12

# auto_generated_comment = '// NOTE: This file is automatically generated by test_converter.py using itl tests.\n'

I = 'I' # interval
B = 'B' # boolean
T = 'T' # type
N = 'N' # number

supported = {
    "pos": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "pos", "latex_name": "+"},
    "neg": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "neg", "latex_name": "-"},
    "add": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "add", "latex_name": "+"},
    "sub": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "sub", "latex_name": "-"},
    "mul": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "mul", "latex_name": r"\times"},
    "div": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "div", "latex_name": r"\div"},
    "recip": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "recip", "latex_name": r"\mathrm{recip}"},
    "sqr": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "sqr", "latex_name": r"\mathrm{sqr}"},
    "sqrt": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "sqrt", "latex_name": r"\sqrt"},
    "fma": {"args": [I, I, I], "ret": I, "ulp_error": 0, "code_name": "fma", "latex_name": r"\mathrm{fma}"},
    "mig": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "mig", "latex_name": r"\mathrm{mig}"},
    "mag": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "mag", "latex_name": r"\mathrm{mag}"},
    "wid": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "wid", "latex_name": r"\mathrm{wid}"},
    "inf": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "inf", "latex_name": r"\inf"},
    "sup": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "sup", "latex_name": r"\sup"},
    "mid": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "mid", "latex_name": r"\mathrm{mid}"},
    "rad": {"args": [I], "ret": T, "ulp_error": 0, "code_name": "rad", "latex_name": r"\mathrm{rad}"},
    "floor": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "floor", "latex_name": r"\lfloor\cdot\rfloor"},
    "ceil": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "ceil", "latex_name": r"\lceil\cdot\rceil"},
    "abs": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "abs", "latex_name": r"\left|\cdot\right|"},
    "min": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "min", "latex_name": r"\min"},
    "max": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "max", "latex_name": r"\max"},
    "trunc": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "trunc", "latex_name": r"\mathrm{trunc}"},
    "sign": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "sign", "latex_name": r"\mathrm{sign}"},
    "intersection": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "intersection", "latex_name": r"\cap"},
    "convexHull": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "convexHull", "latex_name": r"\mathrm{convexHull}"},
    "equal": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "equal", "latex_name": "="},
    "subset": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "subset", "latex_name": r"\subseteq"},
    "interior": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "interior", "latex_name": r"\mathrm{interior}"},
    "disjoint": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "disjoint", "latex_name": r"\mathrm{disjoint}"},
    "isEmpty": {"args": [I], "ret": B, "ulp_error": 0, "code_name": "empty", "latex_name": r"\varnothing"},
    "isEntire": {"args": [I], "ret": B, "ulp_error": 0, "code_name": "entire", "latex_name": r"\mathrm{entire}"},
    "less": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "less", "latex_name": "<"},
    "strictLess": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "strictLess", "latex_name": r"<"},
    "precedes": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "precedes", "latex_name": r"\preceq"},
    "strictPrecedes": {"args": [I, I], "ret": B, "ulp_error": 0, "code_name": "strictPrecedes", "latex_name": r"\prec"},
    "isMember": {"args": [T, I], "ret": B, "ulp_error": 0, "code_name": "member", "latex_name": r"\in"},
    "isSingleton": {"args": [I], "ret": B, "ulp_error": 0, "code_name": "singleton", "latex_name": r"\mathrm{singleton}"},
    "isCommonInterval": {"args": [I], "ret": B, "ulp_error": 0, "code_name": "common", "latex_name": r"\mathrm{common}"},
    "cancelMinus": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "cancelMinus", "latex_name": r"\mathrm{cancelMinus}"},
    "cancelPlus": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "cancelPlus", "latex_name": r"\mathrm{cancelPlus}"},
    "roundTiesToEven": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "roundTiesToEven", "latex_name": r"\mathrm{roundTiesToEven}"},
    "roundTiesToAway": {"args": [I], "ret": I, "ulp_error": 0, "code_name": "roundTiesToAway", "latex_name": r"\mathrm{roundTiesToAway}"},
    "cbrt": {"args": [I], "ret": I, "ulp_error": 1, "code_name": "cbrt", "latex_name": r"\sqrt[3]{\cdot}"},
    "exp": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "exp", "latex_name": r"\exp"},
    "exp2": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "exp2", "latex_name": r"\exp_2"},
    "exp10": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "exp10", "latex_name": r"\exp_{10}"},
    "expm1": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "expm1", "latex_name": r"\exp_{m1}"},
    "log": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "log", "latex_name": r"\log"},
    "log2": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "log2", "latex_name": r"\log_2"},
    "log10": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "log10", "latex_name": r"\log_{10}"},
    "log1p": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "log1p", "latex_name": r"\log_{1p}"},
    "sin": {"args": [I], "ret": I, "ulp_error": 2, "code_name": "sin", "latex_name": r"\sin"},
    "cos": {"args": [I], "ret": I, "ulp_error": 2, "code_name": "cos", "latex_name": r"\cos"},
    "tan": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "tan", "latex_name": r"\tan"},
    "asin": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "asin", "latex_name": r"\arcsin"},
    "acos": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "acos", "latex_name": r"\arccos"},
    "atan": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "atan", "latex_name": r"\arctan"},
    "atan2": {"args": [I, I], "ret": I, "ulp_error": 3, "code_name": "atan2", "latex_name": r"\arctan2"},
    "sinh": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "sinh", "latex_name": r"\sinh"},
    "cosh": {"args": [I], "ret": I, "ulp_error": 2, "code_name": "cosh", "latex_name": r"\cosh"},
    "cot": {"args": [I], "ret": I, "ulp_error": 4, "code_name": "cot", "latex_name": r"\cot"},
    "coth": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "coth", "latex_name": r"\coth"},
    "tanh": {"args": [I], "ret": I, "ulp_error": 2, "code_name": "tanh", "latex_name": r"\tanh"},
    "asinh": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "arcsinh", "latex_name": r"\mathrm{arcsinh}"},
    "acosh": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "arccosh", "latex_name": r"\mathrm{arccosh}"},
    "atanh": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "arctanh", "latex_name": r"\mathrm{arctanh}"},
    "sinpi": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "sinpi", "latex_name": r"\sin\pi"},
    "cospi": {"args": [I], "ret": I, "ulp_error": 3, "code_name": "cospi", "latex_name": r"\cos\pi"},
    "pown": {"args": [I, N], "ret": I, "ulp_error": 1, "code_name": "pown", "latex_name": r"\mathrm{pown}"},
    "pow": {"args": [I, I], "ret": I, "ulp_error": 1, "code_name": "pow", "latex_name": r"\mathrm{pow}"},
    "rootn": {"args": [I, N], "ret": I, "ulp_error": 2, "code_name": "rootn", "latex_name": r"\sqrt[n]{\cdot}"},
    "hypot": {"args": [I, I], "ret": I, "ulp_error": 0, "code_name": "hypot", "latex_name": r"\mathrm{hypot}"},
}

latex_type = { T: r"\mathbb{R}", I: r"\mathbb{IR}", N: r"\mathbb{N}", B: r"\mathbb{B}"}
code_type = { T: "T", I: r"<IntervalRef />", B: "bool", N: "std::integral auto"}


if __name__ == '__main__':
    buffer = ""
    # api_buffer = ""
    for k,v in supported.items():
        args, ret, ulp_error, code_name, latex_name = v.values()

        header = f"## {k}\n"

        # TODO: add names of inputs
        code_inputs = ", ".join(code_type[arg] for arg in args)

        declaration = f"""
<FunctionDeclaration
  sourceUrl="arithmetic/basic.cuh#L22" 
  nvidiaUrl="group__CUDA__MATH__DOUBLE.html#_CPPv43sind"
>
  {code_type[ret]} {code_name}({code_inputs})
</FunctionDeclaration>
"""
        latex_inputs = " ".join(latex_type[arg] for arg in args)
        signature = f"$${latex_name} " + latex_inputs + R" \rightarrow " + latex_type[ret] + "$$"
        note = ""
        implementation = ""
        extra = note + implementation

        details = f"""
<FunctionDetails>
  <FunctionBrief error="{ulp_error}" slot="brief">
    Computes the sine of x (in radians).
  </FunctionBrief>
  
  <FunctionSignature>
    {signature}
  </FunctionSignature>
  {extra}
</FunctionDetails>

---
"""
        full = header + declaration + details

        buffer += full

    print(buffer)
