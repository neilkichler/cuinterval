
#include <cuinterval/cuinterval.h>

#include "tests.h"
#include "test_ops.cuh"

#include <stdio.h>

template<typename T>
void tests_libieeep1788_elem() {
    using namespace boost::ut;

    using I = interval<T>;
    using B = bool;

    I empty         = ::empty<T>();
    I entire        = ::entire<T>();
    T infinity = std::numeric_limits<T>::infinity();
    T NaN = ::nan("");

    const int n = 564; // count of largest test array
    const int n_bytes   = n * sizeof(I);
    const int blockSize = 256;
    [[maybe_unused]] const int numBlocks = (n + blockSize - 1) / blockSize;

    I *d_xs_, *d_ys_, *d_zs_, *d_res_;

    CUDA_CHECK(cudaMalloc(&d_xs_, n_bytes));
    CUDA_CHECK(cudaMalloc(&d_ys_, n_bytes));
    CUDA_CHECK(cudaMalloc(&d_zs_, n_bytes));
    CUDA_CHECK(cudaMalloc(&d_res_, n_bytes));

    "minimal_pos_pos"_test = [&] {
        constexpr int n = 11;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,2.0},
            {-2.5,-0.0},
            {-2.5,0.0},
            {-infinity,-1.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,2.0},
            {-2.5,0.0},
            {-2.5,0.0},
            {-infinity,-1.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_pos<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_neg_neg"_test = [&] {
        constexpr int n = 11;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,2.0},
            {-2.0,-0.0},
            {-2.0,0.0},
            {-infinity,1.0},
            {0.0,-0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {-2.0,0.0},
            {0.0,2.0},
            {0.0,2.0},
            {-1.0,infinity},
            {0.0,0.0},
            {-2.0,0.0},
            {-2.0,-1.0},
            {-infinity,-1.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_neg<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_add_add"_test = [&] {
        constexpr int n = 31;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {0.0,0.0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {-3.0,4.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-3.0,4.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0.0,-0.0},
            {0.0,0.0},
            {3.0,4.0},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-1.0,1.0},
            empty,
            entire,
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {-0X1.E666666666657P+0,0X1.0CCCCCCCCCCC5P+1},
            entire,
            {-infinity,6.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,6.0},
            {-infinity,6.0},
            entire,
            {-3.0,4.0},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {0X1.0CCCCCCCCCCC4P+1,0X1.0CCCCCCCCCCC5P+1},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {4.0,infinity},
            {-infinity,6.0},
            {4.0,6.0},
            {4.0,infinity},
            entire,
            {4.0,infinity},
            {4.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_add<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub);
        }
    };

    "minimal_sub_sub"_test = [&] {
        constexpr int n = 31;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {0.0,0.0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0x1.FFFFFFFFFFFFFp1023,4.0},
            {3.0,4.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-3.0,4.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0.0,-0.0},
            {-3.0,4.0},
            {0.0,0.0},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-1.0,1.0},
            empty,
            entire,
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-0x1.FFFFFFFFFFFFFp1023,3.0},
            {-0X1.0CCCCCCCCCCC5P+1,0X1.E666666666657P+0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-4.0,3.0},
            {0X1.0CCCCCCCCCCC4P+1,0X1.0CCCCCCCCCCC5P+1},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {-3.0,infinity},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {-3.0,infinity},
            {-3.0,-1.0},
            {-infinity,-1.0},
            {-3.0,infinity},
            {-3.0,infinity},
            entire,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_sub<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub);
        }
    };

    "minimal_mul_mul"_test = [&] {
        constexpr int n = 116;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.999999999999AP-4},
            {-1.0,1.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,2.0},
            {-2.0,2.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            empty,
            {-0.0,-0.0},
            {-1.0,10.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-5.0,3.0},
            {-5.0,3.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
            {-0X1.FFFFFFFFFFFFP+0,infinity},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-1.0,1.0},
            {0.0,0.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {-0X1.999999999998EP-3,0X1.999999999998EP-3},
            {-0X1.FFFFFFFFFFFE1P+1,0X1.999999999998EP-3},
            {-0X1.FFFFFFFFFFFE1P+1,-0X1.47AE147AE147BP-7},
            empty,
            {0.0,0.0},
            {-10.0,50.0},
            {-25.0,5.0},
            {-25.0,15.0},
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-3.0,15.0},
            entire,
            entire,
            {0.0,0.0},
            {-infinity,5.0},
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-3.0,infinity},
            entire,
            entire,
            {0.0,0.0},
            {5.0,50.0},
            {-30.0,50.0},
            {-infinity,50.0},
            {5.0,infinity},
            {-30.0,infinity},
            {0.0,0.0},
            {-30.0,-5.0},
            {-infinity,-5.0},
            entire,
            {-30.0,50.0},
            {-10.0,10.0},
            {0.0,0.0},
            {3.0,infinity},
            entire,
            entire,
            {3.0,infinity},
            entire,
            {0.0,0.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            entire,
            {0.0,0.0},
            {-15.0,infinity},
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-infinity,9.0},
            entire,
            entire,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {-0X1.FFFFFFFFFFFE1P+1,infinity},
            {0.0,0.0},
            {-25.0,-1.0},
            {-25.0,15.0},
            {-25.0,infinity},
            {-infinity,-1.0},
            {-infinity,15.0},
            {0.0,0.0},
            {1.0,15.0},
            {1.0,infinity},
            entire,
            {0.0,0.0},
            {-infinity,-1.0},
            entire,
            entire,
            {-infinity,-1.0},
            entire,
            {0.0,0.0},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_mul<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub);
        }
    };

    "minimal_div_div"_test = [&] {
        constexpr int n = 341;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-1.0,1.0},
            {-1.0,2.0},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-2.0,-1.0},
            {-2.0,-1.0},
            {-2.0,-1.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-1.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,3.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            empty,
            {10.0,infinity},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,10.0},
            {-10.0,-3.0},
            {0.0,10.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {1.0,3.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-infinity,-10.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-1.0,-0.1},
            {-1.0,1.0},
            {0.0,0.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-10.0,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-0X1.999999999999AP-4,0X1.999999999999AP-3},
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-infinity,5.0},
            entire,
            {-infinity,5.0},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-5.0,infinity},
            {-5.0,infinity},
            entire,
            {-infinity,-0X1.9999999999999P-4},
            {0X1.9999999999999P-4,0X1.5555555555556P-1},
            {-infinity,-0X1.9999999999999P-4},
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-10.0,0.0},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {5.0,infinity},
            {5.0,infinity},
            entire,
            entire,
            {3.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {-10.0,-3.0},
            {-10.0,0.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-10.0,0.0},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,10.0},
            entire,
            {-5.0,10.0},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-10.0,5.0},
            {-10.0,5.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            {-infinity,-0X1.5555555555555P-2},
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {5.0,infinity},
            {5.0,infinity},
            entire,
            entire,
            {3.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,infinity},
            entire,
            {-5.0,infinity},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-infinity,5.0},
            {-infinity,5.0},
            entire,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-10.0,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            {-0X1.3333333333334P-2,0.0},
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {-infinity,-5.0},
            {-infinity,-5.0},
            entire,
            entire,
            {-10.0,-3.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {3.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {-infinity,-5.0},
            {-infinity,-5.0},
            entire,
            entire,
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {3.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_div<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub);
        }
    };

    "minimal_recip_recip"_test = [&] {
        constexpr int n = 18;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,10.0},
            {-0.0,infinity},
            {-10.0,-0.0},
            {-10.0,0.0},
            {-10.0,10.0},
            {-10.0,infinity},
            {-50.0,-10.0},
            {-infinity,-0.0},
            {-infinity,-10.0},
            {-infinity,0.0},
            {-infinity,10.0},
            {0.0,0.0},
            {0.0,10.0},
            {0.0,infinity},
            {10.0,50.0},
            {10.0,infinity},
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            empty,
            {0X1.9999999999999P-4,infinity},
            {0.0,infinity},
            {-infinity,-0X1.9999999999999P-4},
            {-infinity,-0X1.9999999999999P-4},
            entire,
            entire,
            {-0X1.999999999999AP-4,-0X1.47AE147AE147AP-6},
            {-infinity,0.0},
            {-0X1.999999999999AP-4,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0X1.9999999999999P-4,infinity},
            {0.0,infinity},
            {0X1.47AE147AE147AP-6,0X1.999999999999AP-4},
            {0.0,0X1.999999999999AP-4},
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_recip<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_sqr_sqr"_test = [&] {
        constexpr int n = 12;
        std::array<I, n> h_xs {{
            {-0.0,1.0},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-1.0,1.0},
            {-5.0,-0.0},
            {-5.0,0.0},
            {-5.0,3.0},
            {-infinity,-0x0.0000000000001p-1022},
            {0.0,1.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,1.0},
            {0X1.FFFFFFFFFFFEP+1,0X1.FFFFFFFFFFFE1P+1},
            {0.0,0X1.FFFFFFFFFFFE1P+1},
            {0.0,1.0},
            {0.0,25.0},
            {0.0,25.0},
            {0.0,25.0},
            {0.0,infinity},
            {0.0,1.0},
            {0X1.47AE147AE147BP-7,0X1.47AE147AE147CP-7},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_sqr<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_sqrt_sqrt"_test = [&] {
        constexpr int n = 13;
        std::array<I, n> h_xs {{
            {-0.0,1.0},
            {-0.0,25.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-1.0,1.0},
            {-5.0,25.0},
            {-5.0,infinity},
            {-infinity,-0x0.0000000000001p-1022},
            {0.0,1.0},
            {0.0,25.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,1.0},
            {0.0,5.0},
            {0.0,0X1.43D136248491P-2},
            {0.0,1.0},
            {0.0,5.0},
            {0.0,infinity},
            empty,
            {0.0,1.0},
            {0.0,5.0},
            {0X1.43D136248490FP-2,0X1.43D136248491P-2},
            {0X1.43D136248490FP-2,0X1.6A09E667F3BC7P+0},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_sqrt<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_fma_fma"_test = [&] {
        constexpr int n = 564;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.5,-0.1},
            {-0.5,-0.1},
            {-0.5,0.2},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.1,0.5},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-infinity,3.0},
            {2.0,3.0},
            {-5.0,3.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,3.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_zs {{
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0.1,0.1},
            {-0.1,0.1},
            {-0.1,0.1},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0.1,0.1},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        I *d_zs = (I *)d_zs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0X1.999999999999AP+0,infinity},
            {-0X1.999999999999AP+0,-0X1.999999999999AP-4},
            {-0X1.999999999999AP+0,0X1.4CCCCCCCCCCCDP+1},
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-12.0,52.0},
            {-12.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-27.0,7.0},
            {-27.0,infinity},
            {-infinity,7.0},
            empty,
            entire,
            {-27.0,17.0},
            {-27.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-5.0,17.0},
            {-5.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,7.0},
            entire,
            {-infinity,7.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-5.0,infinity},
            {-5.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {3.0,52.0},
            {3.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-32.0,52.0},
            {-32.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-infinity,52.0},
            entire,
            {-infinity,52.0},
            empty,
            entire,
            {3.0,infinity},
            {3.0,infinity},
            entire,
            empty,
            entire,
            {-32.0,infinity},
            {-32.0,infinity},
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-32.0,-3.0},
            {-32.0,infinity},
            {-infinity,-3.0},
            empty,
            entire,
            {-infinity,-3.0},
            entire,
            {-infinity,-3.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-32.0,52.0},
            {-32.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-12.0,12.0},
            {-12.0,infinity},
            {-infinity,12.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,-1.0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            {-infinity,-1.0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-17.0,infinity},
            {-17.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,11.0},
            entire,
            {-infinity,11.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0X1.4CCCCCCCCCCCDP+1,0X1.999999999999AP+0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-27.0,1.0},
            {-27.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
            {-27.0,17.0},
            {-27.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            {-27.0,infinity},
            {-27.0,infinity},
            entire,
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            {-infinity,17.0},
            entire,
            {-infinity,17.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-1.0,17.0},
            {-1.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_zs, h_zs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_fma<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_zs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\nz = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub, h_zs[fail_id].lb, h_zs[fail_id].ub);
        }
    };

    "minimal_exp_exp"_test = [&] {
        constexpr int n = 19;
        std::array<I, n> h_xs {{
            {-0.0,0X1.62E42FEFA39EP+9},
            {-0.0,infinity},
            {-0X1.6232BDD7ABCD3P+8,-0.0},
            {-0X1.6232BDD7ABCD3P+8,0.0},
            {-0X1.6232BDD7ABCD3P+8,0X1.62E42FEFA39EP+9},
            {-0X1.6232BDD7ABCD3P+8,1.0},
            {-0X1.6232BDD7ABCD3P+9,0X1.62E42FEFA39EP+9},
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,0X1.62E42FEFA39FP+9},
            {0.0,0X1.62E42FEFA39EP+9},
            {0.0,infinity},
            {0X1.62E42FEFA39FP+9,0X1.62E42FEFA39FP+9},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {1.0,5.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {1.0,0X1.FFFFFFFFFC32BP+1023},
            {1.0,infinity},
            {0X1.FFFFFFFFFFE7BP-512,1.0},
            {0X1.FFFFFFFFFFE7BP-512,1.0},
            {0X1.FFFFFFFFFFE7BP-512,0X1.FFFFFFFFFC32BP+1023},
            {0X1.FFFFFFFFFFE7BP-512,0X1.5BF0A8B14576AP+1},
            {0X0.FFFFFFFFFFE7BP-1022,0X1.FFFFFFFFFC32BP+1023},
            {0X1.2797F0A337A5FP-5,0X1.86091CC9095C5P+2},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,infinity},
            {1.0,0X1.FFFFFFFFFC32BP+1023},
            {1.0,infinity},
            {0X1.FFFFFFFFFFFFFP+1023,infinity},
            {0X1.EF461A783114CP+16,0X1.691D36C6B008CP+37},
            {0X1.1337E9E45812AP+1,0X1.805A5C88021B6P+142},
            {0X1.5BF0A8B145769P+1,0X1.28D389970339P+7},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_exp<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 3;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_exp2_exp2"_test = [&] {
        constexpr int n = 18;
        std::array<I, n> h_xs {{
            {-0.0,1023.0},
            {-0.0,infinity},
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {-1022.0,-0.0},
            {-1022.0,0.0},
            {-1022.0,1.0},
            {-1022.0,1023.0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,1024.0},
            {0.0,1023.0},
            {0.0,infinity},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {1.0,5.0},
            {1024.0,1024.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {1.0,0X1P+1023},
            {1.0,infinity},
            {0X1.9999999999998P-4,0X1.C000000000001P+1},
            {0X1P-1022,1.0},
            {0X1P-1022,1.0},
            {0X1P-1022,2.0},
            {0X1P-1022,0X1P+1023},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,infinity},
            {1.0,0X1P+1023},
            {1.0,infinity},
            {0X1.AEA0000721857P+11,0X1.FCA0555555559P+25},
            {0X1.B333333333332P+0,0X1.C81FD88228B4FP+98},
            {2.0,32.0},
            {0X1.FFFFFFFFFFFFFP+1023,infinity},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_exp2<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 3;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_exp10_exp10"_test = [&] {
        constexpr int n = 19;
        std::array<I, n> h_xs {{
            {-0.0,0X1.34413509F79FEP+8},
            {-0.0,infinity},
            {-0X1.22P+7,-0.0},
            {-0X1.22P+7,0.0},
            {-0X1.22P+7,0X1.34413509F79FEP+8},
            {-0X1.22P+7,1.0},
            {-0X1.33A7146F72A42P+8,0X1.34413509F79FEP+8},
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,0X1.34413509F79FFP+8},
            {0.0,0X1.34413509F79FEP+8},
            {0.0,infinity},
            {0X1.34413509F79FFP+8,0X1.34413509F79FFP+8},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {1.0,5.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {1.0,0X1.FFFFFFFFFFBA1P+1023},
            {1.0,infinity},
            {0X1.3FAAC3E3FA1F3P-482,1.0},
            {0X1.3FAAC3E3FA1F3P-482,1.0},
            {0X1.3FAAC3E3FA1F3P-482,0X1.FFFFFFFFFFBA1P+1023},
            {0X1.3FAAC3E3FA1F3P-482,10.0},
            {0X0.FFFFFFFFFFFE3P-1022,0X1.FFFFFFFFFFBA1P+1023},
            {0X1.F3A8254311F9AP-12,0X1.00B18AD5B7D56P+6},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,infinity},
            {1.0,0X1.FFFFFFFFFFBA1P+1023},
            {1.0,infinity},
            {0X1.FFFFFFFFFFFFFP+1023,infinity},
            {0X1.0608D2279A811P+39,0X1.43AF5D4271CB8P+86},
            {0X1.75014B7296807P+2,0X1.3EEC1D47DFB2BP+328},
            {10.0,100000.0},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_exp10<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 3;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_log_log"_test = [&] {
        constexpr int n = 21;
        std::array<I, n> h_xs {{
            {-0.0,0x1.FFFFFFFFFFFFFp1023},
            {-0.0,1.0},
            {-0.0,infinity},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0x1.FFFFFFFFFFFFFp1023},
            {0.0,1.0},
            {0.0,infinity},
            {0X1.5BF0A8B145769P+1,0X1.5BF0A8B145769P+1},
            {0X1.5BF0A8B145769P+1,32.0},
            {0X1.5BF0A8B14576AP+1,0X1.5BF0A8B14576AP+1},
            {0X1.999999999999AP-4,0X1.CP+1},
            {0X1.AEA0000721861P+11,0X1.FCA055555554CP+25},
            {0X1.B333333333333P+0,0X1.C81FD88228B2FP+98},
            {0x0.0000000000001p-1022,0X1.5BF0A8B14576AP+1},
            {0x0.0000000000001p-1022,0x1.FFFFFFFFFFFFFp1023},
            {0x0.0000000000001p-1022,1.0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-infinity,0X1.62E42FEFA39FP+9},
            {-infinity,0.0},
            entire,
            empty,
            empty,
            {-infinity,0X1.62E42FEFA39FP+9},
            {-infinity,0.0},
            entire,
            {0X1.FFFFFFFFFFFFFP-1,0X1P+0},
            {0X1.FFFFFFFFFFFFFP-1,0X1.BB9D3BEB8C86CP+1},
            {0X1P+0,0X1.0000000000001P+0},
            {-0X1.26BB1BBB55516P+1,0X1.40B512EB53D6P+0},
            {0X1.04A1363DB1E63P+3,0X1.203E52C0256B5P+4},
            {0X1.0FAE81914A99P-1,0X1.120627F6AE7F1P+6},
            {-0x1.74385446D71C4p9,0X1.0000000000001P+0},
            {-0x1.74385446D71C4p9,+0x1.62E42FEFA39Fp9},
            {-0x1.74385446D71C4p9,0.0},
            {0.0,0X1.62E42FEFA39FP+9},
            {0.0,infinity},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_log<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 3;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_log2_log2"_test = [&] {
        constexpr int n = 19;
        std::array<I, n> h_xs {{
            {-0.0,0x1.FFFFFFFFFFFFFp1023},
            {-0.0,1.0},
            {-0.0,infinity},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0x1.FFFFFFFFFFFFFp1023},
            {0.0,1.0},
            {0.0,infinity},
            {0X1.999999999999AP-4,0X1.CP+1},
            {0X1.AEA0000721861P+11,0X1.FCA055555554CP+25},
            {0X1.B333333333333P+0,0X1.C81FD88228B2FP+98},
            {0x0.0000000000001p-1022,0x1.FFFFFFFFFFFFFp1023},
            {0x0.0000000000001p-1022,1.0},
            {0x0.0000000000001p-1022,2.0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,infinity},
            {2.0,32.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-infinity,1024.0},
            {-infinity,0.0},
            entire,
            empty,
            empty,
            {-infinity,1024.0},
            {-infinity,0.0},
            entire,
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {-1074.0,1024.0},
            {-1074.0,0.0},
            {-1074.0,1.0},
            {0.0,1024.0},
            {0.0,infinity},
            {1.0,5.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_log2<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 3;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_log10_log10"_test = [&] {
        constexpr int n = 20;
        std::array<I, n> h_xs {{
            {-0.0,0x1.FFFFFFFFFFFFFp1023},
            {-0.0,1.0},
            {-0.0,infinity},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0x1.FFFFFFFFFFFFFp1023},
            {0.0,1.0},
            {0.0,infinity},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.CP+1},
            {0X1.AEA0000721861P+11,0X1.FCA055555554CP+25},
            {0X1.B333333333333P+0,0X1.C81FD88228B2FP+98},
            {0x0.0000000000001p-1022,0x1.FFFFFFFFFFFFFp1023},
            {0x0.0000000000001p-1022,1.0},
            {0x0.0000000000001p-1022,10.0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,infinity},
            {10.0,100000.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-infinity,0X1.34413509F79FFP+8},
            {-infinity,0.0},
            entire,
            empty,
            empty,
            {-infinity,0X1.34413509F79FFP+8},
            {-infinity,0.0},
            entire,
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1P+0,0X1.1690163290F4P-1},
            {0X1.C4C29DD829191P+1,0X1.F4BAEBBA4FA4P+2},
            {0X1.D7F59AA5BECB9P-3,0X1.DC074D84E5AABP+4},
            {-0x1.434E6420F4374p+8,+0x1.34413509F79FFp+8},
            {-0x1.434E6420F4374p+8,0.0},
            {-0x1.434E6420F4374p+8,1.0},
            {0.0,0X1.34413509F79FFP+8},
            {0.0,infinity},
            {1.0,5.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_log10<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 3;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_sign_sign"_test = [&] {
        constexpr int n = 11;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,2.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-5.0,-2.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0.0},
            {0.0,1.0},
            {-1.0,0.0},
            {-1.0,1.0},
            {-1.0,-1.0},
            {0.0,0.0},
            {0.0,1.0},
            {1.0,1.0},
            empty,
            {-1.0,1.0},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_sign<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_ceil_ceil"_test = [&] {
        constexpr int n = 15;
        std::array<I, n> h_xs {{
            {-0.0,2.2},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,2.2},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {-infinity,2.2},
            {0.0,2.2},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {1.1,2.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,3.0},
            {-1.0,3.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-1.0,infinity},
            {-1.0,3.0},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {-infinity,3.0},
            {0.0,3.0},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {2.0,2.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_ceil<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_floor_floor"_test = [&] {
        constexpr int n = 13;
        std::array<I, n> h_xs {{
            {-0.0,2.2},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,2.2},
            {-infinity,2.2},
            {0.0,2.2},
            {1.1,2.0},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,2.0},
            {-1.0,2.0},
            {-2.0,0.0},
            {-2.0,-1.0},
            {-2.0,0.0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-2.0,2.0},
            {-infinity,2.0},
            {0.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_floor<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_trunc_trunc"_test = [&] {
        constexpr int n = 13;
        std::array<I, n> h_xs {{
            {-0.0,2.2},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,2.2},
            {-infinity,2.2},
            {0.0,2.2},
            {1.1,2.1},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,2.0},
            {-1.0,2.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-1.0,infinity},
            {-1.0,2.0},
            {-infinity,2.0},
            {0.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_trunc<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_round_ties_to_even_roundTiesToEven"_test = [&] {
        constexpr int n = 18;
        std::array<I, n> h_xs {{
            {-0.0,2.5},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,-0.5},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,2.0},
            {-1.5,2.5},
            {-1.5,infinity},
            {-1.9,2.2},
            {-1.9,2.5},
            {-infinity,2.2},
            {0.0,2.5},
            {1.1,2.1},
            {1.5,2.1},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,2.0},
            {-1.0,2.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-2.0,2.0},
            {-2.0,2.0},
            {-infinity,2.0},
            {0.0,2.0},
            {1.0,2.0},
            {2.0,2.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_roundTiesToEven<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_round_ties_to_away_roundTiesToAway"_test = [&] {
        constexpr int n = 18;
        std::array<I, n> h_xs {{
            {-0.0,2.5},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,-0.5},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,2.5},
            {-1.5,infinity},
            {-1.9,2.2},
            {-1.9,2.5},
            {-2.5,2.0},
            {-infinity,2.2},
            {0.0,2.5},
            {0.5,2.1},
            {1.1,2.1},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,3.0},
            {-1.0,2.0},
            {-1.0,-0.0},
            {-1.0,0.0},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-2.0,3.0},
            {-2.0,infinity},
            {-2.0,2.0},
            {-2.0,3.0},
            {-3.0,2.0},
            {-infinity,2.0},
            {0.0,3.0},
            {1.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_roundTiesToAway<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_abs_abs"_test = [&] {
        constexpr int n = 12;
        std::array<I, n> h_xs {{
            {-0.0,0.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,0.2},
            {-infinity,-2.2},
            {0.0,0.2},
            {1.1,2.1},
            empty,
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,0.2},
            {0.0,1.1},
            {0.4,1.1},
            {0.0,1.1},
            {0.0,2.0},
            {0.0,infinity},
            {0.0,1.9},
            {2.2,infinity},
            {0.0,0.2},
            {1.1,2.1},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_abs<<<numBlocks, blockSize>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub);
        }
    };

    "minimal_min_min"_test = [&] {
        constexpr int n = 15;
        std::array<I, n> h_xs {{
            {-0.0,5.0},
            {-7.0,-0.0},
            {-7.0,-5.0},
            {-7.0,0.0},
            {0.0,5.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            empty,
            empty,
            empty,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {2.0,4.0},
            {2.0,4.0},
            {2.0,4.0},
            {2.0,4.0},
            {2.0,4.0},
            empty,
            entire,
            {2.0,4.0},
            {2.0,8.0},
            entire,
            {1.0,2.0},
            empty,
            entire,
            {1.0,2.0},
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {0.0,4.0},
            {-7.0,0.0},
            {-7.0,-5.0},
            {-7.0,0.0},
            {0.0,4.0},
            empty,
            {-infinity,2.0},
            {1.0,4.0},
            {1.0,5.0},
            {-infinity,5.0},
            empty,
            empty,
            empty,
            {-infinity,2.0},
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_min<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub);
        }
    };

    "minimal_max_max"_test = [&] {
        constexpr int n = 15;
        std::array<I, n> h_xs {{
            {-1.0,5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,5.0},
            {1.0,5.0},
            empty,
            empty,
            empty,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            entire,
            {-0.0,4.0},
            {-2.0,-0.0},
            {-2.0,0.0},
            {0.0,4.0},
            {2.0,4.0},
            empty,
            entire,
            {2.0,4.0},
            {2.0,8.0},
            {1.0,2.0},
            empty,
            entire,
            {1.0,2.0},
            entire,
        }};

        std::array<I, n> h_res{};
        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        I *d_ys = (I *)d_ys_;
        int n_result_bytes = n * sizeof(I);
        std::array<I, n> h_ref {{
            {-1.0,infinity},
            {0.0,4.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {0.0,4.0},
            {2.0,4.0},
            empty,
            {1.0,infinity},
            {2.0,5.0},
            {2.0,8.0},
            empty,
            empty,
            empty,
            {1.0,infinity},
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_res, h_res.data(), n_result_bytes, cudaMemcpyHostToDevice));
        test_max<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpy(h_res.data(), d_res, n_result_bytes, cudaMemcpyDeviceToHost));
        int max_ulp_diff = 0;
        auto failed = check_all_equal<I, n>(h_res, h_ref, max_ulp_diff);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("x = [%a, %a]\ny = [%a, %a]\n", h_xs[fail_id].lb, h_xs[fail_id].ub, h_ys[fail_id].lb, h_ys[fail_id].ub);
        }
    };


    CUDA_CHECK(cudaFree(d_xs_));
    CUDA_CHECK(cudaFree(d_ys_));
    CUDA_CHECK(cudaFree(d_zs_));
    CUDA_CHECK(cudaFree(d_res_));
}
