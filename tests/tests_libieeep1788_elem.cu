
#include <cuinterval/cuinterval.h>

#include "tests.h"
#include "test_ops.cuh"

#include <stdio.h>

template<typename T>
void tests_libieeep1788_elem() {
    using namespace boost::ut;

    using I = interval<T>;

    I empty         = ::empty<T>();
    I entire        = ::entire<T>();
    T infinity = std::numeric_limits<T>::infinity();

    const int n = 564; // count of largest test array
    const int n_bytes   = n * sizeof(I);
    const int blockSize = 256;
    const int numBlocks = (n + blockSize - 1) / blockSize;

    interval<T> *d_xs, *d_ys, *d_zs;
    CUDA_CHECK(cudaMalloc(&d_xs, n_bytes));
    CUDA_CHECK(cudaMalloc(&d_ys, n_bytes));
    CUDA_CHECK(cudaMalloc(&d_zs, n_bytes));

    "minimal_pos_pos"_test = [&] {
        constexpr int n = 11;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,2.0},
            {-2.5,-0.0},
            {-2.5,0.0},
            {-infinity,-1.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,2.0},
            {-2.5,0.0},
            {-2.5,0.0},
            {-infinity,-1.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        test_pos<<<numBlocks, blockSize>>>(n, d_xs);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("r = [%a, %a]\n", h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_neg_neg"_test = [&] {
        constexpr int n = 11;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,2.0},
            {-2.0,-0.0},
            {-2.0,0.0},
            {-infinity,1.0},
            {0.0,-0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {0.0,0.0},
            {-2.0,0.0},
            {0.0,2.0},
            {0.0,2.0},
            {-1.0,infinity},
            {0.0,0.0},
            {-2.0,0.0},
            {-2.0,-1.0},
            {-infinity,-1.0},
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        test_neg<<<numBlocks, blockSize>>>(n, d_xs);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("r = [%a, %a]\n", h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_add_add"_test = [&] {
        constexpr int n = 31;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {std::numeric_limits<T>::lowest(),2.0},
            {std::numeric_limits<T>::lowest(),2.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {0.0,0.0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-3.0,std::numeric_limits<T>::max()},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-3.0,std::numeric_limits<T>::max()},
            {-3.0,4.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-3.0,4.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0.0,-0.0},
            {0.0,0.0},
            {3.0,4.0},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-1.0,1.0},
            empty,
            entire,
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {-3.0,std::numeric_limits<T>::max()},
            {-0X1.E666666666657P+0,0X1.0CCCCCCCCCCC5P+1},
            entire,
            {-infinity,6.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,6.0},
            {-infinity,6.0},
            entire,
            {-3.0,4.0},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {0X1.0CCCCCCCCCCC4P+1,0X1.0CCCCCCCCCCC5P+1},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,std::numeric_limits<T>::max()},
            {4.0,infinity},
            {-infinity,6.0},
            {4.0,6.0},
            {4.0,infinity},
            entire,
            {4.0,infinity},
            {4.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        test_add<<<numBlocks, blockSize>>>(n, d_xs, d_ys);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("y = [%a, %a]\nr = [%a, %a]\n", h_ys[fail_id].lb, h_ys[fail_id].ub, h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_sub_sub"_test = [&] {
        constexpr int n = 31;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {std::numeric_limits<T>::lowest(),2.0},
            {std::numeric_limits<T>::lowest(),2.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {0.0,0.0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,std::numeric_limits<T>::max()},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-3.0,std::numeric_limits<T>::max()},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {std::numeric_limits<T>::lowest(),4.0},
            {3.0,4.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-3.0,4.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0.0,-0.0},
            {-3.0,4.0},
            {0.0,0.0},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-1.0,1.0},
            empty,
            entire,
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {std::numeric_limits<T>::lowest(),3.0},
            {-0X1.0CCCCCCCCCCC5P+1,0X1.E666666666657P+0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-4.0,3.0},
            {0X1.0CCCCCCCCCCC4P+1,0X1.0CCCCCCCCCCC5P+1},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {1.0,std::numeric_limits<T>::max()},
            {-3.0,infinity},
            {1.0,std::numeric_limits<T>::max()},
            {-3.0,infinity},
            {-3.0,-1.0},
            {-infinity,-1.0},
            {-3.0,infinity},
            {-3.0,infinity},
            entire,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        test_sub<<<numBlocks, blockSize>>>(n, d_xs, d_ys);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("y = [%a, %a]\nr = [%a, %a]\n", h_ys[fail_id].lb, h_ys[fail_id].ub, h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_mul_mul"_test = [&] {
        constexpr int n = 116;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.999999999999AP-4},
            {-1.0,1.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,2.0},
            {-2.0,2.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            empty,
            {-0.0,-0.0},
            {-1.0,10.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-5.0,3.0},
            {-5.0,3.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
            {-0X1.FFFFFFFFFFFFP+0,infinity},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-1.0,1.0},
            {0.0,0.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {-0X1.999999999998EP-3,0X1.999999999998EP-3},
            {-0X1.FFFFFFFFFFFE1P+1,0X1.999999999998EP-3},
            {-0X1.FFFFFFFFFFFE1P+1,-0X1.47AE147AE147BP-7},
            empty,
            {0.0,0.0},
            {-10.0,50.0},
            {-25.0,5.0},
            {-25.0,15.0},
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-3.0,15.0},
            entire,
            entire,
            {0.0,0.0},
            {-infinity,5.0},
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-3.0,infinity},
            entire,
            entire,
            {0.0,0.0},
            {5.0,50.0},
            {-30.0,50.0},
            {-infinity,50.0},
            {5.0,infinity},
            {-30.0,infinity},
            {0.0,0.0},
            {-30.0,-5.0},
            {-infinity,-5.0},
            entire,
            {-30.0,50.0},
            {-10.0,10.0},
            {0.0,0.0},
            {3.0,infinity},
            entire,
            entire,
            {3.0,infinity},
            entire,
            {0.0,0.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            entire,
            {0.0,0.0},
            {-15.0,infinity},
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-infinity,9.0},
            entire,
            entire,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {-0X1.FFFFFFFFFFFE1P+1,infinity},
            {0.0,0.0},
            {-25.0,-1.0},
            {-25.0,15.0},
            {-25.0,infinity},
            {-infinity,-1.0},
            {-infinity,15.0},
            {0.0,0.0},
            {1.0,15.0},
            {1.0,infinity},
            entire,
            {0.0,0.0},
            {-infinity,-1.0},
            entire,
            entire,
            {-infinity,-1.0},
            entire,
            {0.0,0.0},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        test_mul<<<numBlocks, blockSize>>>(n, d_xs, d_ys);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("y = [%a, %a]\nr = [%a, %a]\n", h_ys[fail_id].lb, h_ys[fail_id].ub, h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_div_div"_test = [&] {
        constexpr int n = 341;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-1.0,1.0},
            {-1.0,2.0},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-2.0,-1.0},
            {-2.0,-1.0},
            {-2.0,-1.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-1.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,3.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            empty,
            {10.0,infinity},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,10.0},
            {-10.0,-3.0},
            {0.0,10.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {1.0,3.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-infinity,-10.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-1.0,-0.1},
            {-1.0,1.0},
            {0.0,0.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-10.0,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-0X1.999999999999AP-4,0X1.999999999999AP-3},
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-infinity,5.0},
            entire,
            {-infinity,5.0},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-5.0,infinity},
            {-5.0,infinity},
            entire,
            {-infinity,-0X1.9999999999999P-4},
            {0X1.9999999999999P-4,0X1.5555555555556P-1},
            {-infinity,-0X1.9999999999999P-4},
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-10.0,0.0},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {5.0,infinity},
            {5.0,infinity},
            entire,
            entire,
            {3.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {-10.0,-3.0},
            {-10.0,0.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-10.0,0.0},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,10.0},
            entire,
            {-5.0,10.0},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-10.0,5.0},
            {-10.0,5.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            {-infinity,-0X1.5555555555555P-2},
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {5.0,infinity},
            {5.0,infinity},
            entire,
            entire,
            {3.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,infinity},
            entire,
            {-5.0,infinity},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-infinity,5.0},
            {-infinity,5.0},
            entire,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-10.0,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            {-0X1.3333333333334P-2,0.0},
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {-infinity,-5.0},
            {-infinity,-5.0},
            entire,
            entire,
            {-10.0,-3.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {3.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {-infinity,-5.0},
            {-infinity,-5.0},
            entire,
            entire,
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {3.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        test_div<<<numBlocks, blockSize>>>(n, d_xs, d_ys);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("y = [%a, %a]\nr = [%a, %a]\n", h_ys[fail_id].lb, h_ys[fail_id].ub, h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_sqr_sqr"_test = [&] {
        constexpr int n = 12;
        std::array<I, n> h_xs {{
            {-0.0,1.0},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-1.0,1.0},
            {-5.0,-0.0},
            {-5.0,0.0},
            {-5.0,3.0},
            {-infinity,-0x0.0000000000001p-1022},
            {0.0,1.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {0.0,1.0},
            {0X1.FFFFFFFFFFFEP+1,0X1.FFFFFFFFFFFE1P+1},
            {0.0,0X1.FFFFFFFFFFFE1P+1},
            {0.0,1.0},
            {0.0,25.0},
            {0.0,25.0},
            {0.0,25.0},
            {0.0,infinity},
            {0.0,1.0},
            {0X1.47AE147AE147BP-7,0X1.47AE147AE147CP-7},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        test_sqr<<<numBlocks, blockSize>>>(n, d_xs);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("r = [%a, %a]\n", h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_sqrt_sqrt"_test = [&] {
        constexpr int n = 13;
        std::array<I, n> h_xs {{
            {-0.0,1.0},
            {-0.0,25.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-1.0,1.0},
            {-5.0,25.0},
            {-5.0,infinity},
            {-infinity,-0x0.0000000000001p-1022},
            {0.0,1.0},
            {0.0,25.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {0.0,1.0},
            {0.0,5.0},
            {0.0,0X1.43D136248491P-2},
            {0.0,1.0},
            {0.0,5.0},
            {0.0,infinity},
            empty,
            {0.0,1.0},
            {0.0,5.0},
            {0X1.43D136248490FP-2,0X1.43D136248491P-2},
            {0X1.43D136248490FP-2,0X1.6A09E667F3BC7P+0},
            empty,
            {0.0,infinity},
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        test_sqrt<<<numBlocks, blockSize>>>(n, d_xs);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("r = [%a, %a]\n", h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };

    "minimal_fma_fma"_test = [&] {
        constexpr int n = 564;
        std::array<I, n> h_xs {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.5,-0.1},
            {-0.5,-0.1},
            {-0.5,0.2},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.1,0.5},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_ys {{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-infinity,3.0},
            {2.0,3.0},
            {-5.0,3.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,3.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        std::array<I, n> h_zs {{
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0.1,0.1},
            {-0.1,0.1},
            {-0.1,0.1},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0.1,0.1},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
        }};

        std::array<I, n> h_ref {{
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0X1.999999999999AP+0,infinity},
            {-0X1.999999999999AP+0,-0X1.999999999999AP-4},
            {-0X1.999999999999AP+0,0X1.4CCCCCCCCCCCDP+1},
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-12.0,52.0},
            {-12.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-27.0,7.0},
            {-27.0,infinity},
            {-infinity,7.0},
            empty,
            entire,
            {-27.0,17.0},
            {-27.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-5.0,17.0},
            {-5.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,7.0},
            entire,
            {-infinity,7.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-5.0,infinity},
            {-5.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {3.0,52.0},
            {3.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-32.0,52.0},
            {-32.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-infinity,52.0},
            entire,
            {-infinity,52.0},
            empty,
            entire,
            {3.0,infinity},
            {3.0,infinity},
            entire,
            empty,
            entire,
            {-32.0,infinity},
            {-32.0,infinity},
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-32.0,-3.0},
            {-32.0,infinity},
            {-infinity,-3.0},
            empty,
            entire,
            {-infinity,-3.0},
            entire,
            {-infinity,-3.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-32.0,52.0},
            {-32.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-12.0,12.0},
            {-12.0,infinity},
            {-infinity,12.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,-1.0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            {-infinity,-1.0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-17.0,infinity},
            {-17.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,11.0},
            entire,
            {-infinity,11.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0X1.4CCCCCCCCCCCDP+1,0X1.999999999999AP+0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-27.0,1.0},
            {-27.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
            {-27.0,17.0},
            {-27.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            {-27.0,infinity},
            {-27.0,infinity},
            entire,
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            {-infinity,17.0},
            entire,
            {-infinity,17.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-1.0,17.0},
            {-1.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        CUDA_CHECK(cudaMemcpy(d_xs, h_xs.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_ys, h_ys.data(), n_bytes, cudaMemcpyHostToDevice));
        CUDA_CHECK(cudaMemcpy(d_zs, h_zs.data(), n_bytes, cudaMemcpyHostToDevice));
        test_fma<<<numBlocks, blockSize>>>(n, d_xs, d_ys, d_zs);
        CUDA_CHECK(cudaMemcpy(h_xs.data(), d_xs, n_bytes, cudaMemcpyDeviceToHost));
        auto failed = check_all_equal<I, n>(h_xs, h_ref);
        for (auto fail_id : failed) {
            printf("failed at case %zu:\n", fail_id);
            printf("y = [%a, %a]\nz = [%a, %a]\nr = [%a, %a]\n", h_ys[fail_id].lb, h_ys[fail_id].ub, h_zs[fail_id].lb, h_zs[fail_id].ub, h_ref[fail_id].lb, h_ref[fail_id].ub);
        }
    };


    CUDA_CHECK(cudaFree(d_xs));
    CUDA_CHECK(cudaFree(d_ys));
    CUDA_CHECK(cudaFree(d_zs));
}
