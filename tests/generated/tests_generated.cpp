// NOTE: This file is automatically generated by test_converter.py using itl tests.

#include "tests_generated.h"
#include <omp.h>

void tests_c_xsc(cuda_buffer buffer, cudaStream_t stream);
void tests_libieeep1788_elem(cuda_buffer buffer, cudaStream_t stream);
void tests_libieeep1788_rec_bool(cuda_buffer buffer, cudaStream_t stream);
void tests_libieeep1788_cancel(cuda_buffer buffer, cudaStream_t stream);
void tests_libieeep1788_bool(cuda_buffer buffer, cudaStream_t stream);
void tests_atan2(cuda_buffer buffer, cudaStream_t stream);
void tests_mpfi(cuda_buffer buffer, cudaStream_t stream);
void tests_intervalarithmeticjl(cuda_buffer buffer, cudaStream_t stream);
void tests_libieeep1788_set(cuda_buffer buffer, cudaStream_t stream);
void tests_filib(cuda_buffer buffer, cudaStream_t stream);
void tests_libieeep1788_num(cuda_buffer buffer, cudaStream_t stream);

void tests_generated(cuda_buffers buffers, cuda_streams streams) {
    #pragma omp parallel
    {
        #pragma omp single nowait
        {
            #pragma omp task
            tests_c_xsc(buffers[1], streams[1]);
            #pragma omp task
            tests_libieeep1788_elem(buffers[3], streams[3]);
            #pragma omp task
            tests_libieeep1788_rec_bool(buffers[1], streams[1]);
            #pragma omp task
            tests_libieeep1788_cancel(buffers[2], streams[2]);
            #pragma omp task
            tests_libieeep1788_bool(buffers[3], streams[3]);
            #pragma omp task
            tests_atan2(buffers[0], streams[0]);
            #pragma omp task
            tests_mpfi(buffers[1], streams[1]);
            #pragma omp task
            tests_intervalarithmeticjl(buffers[2], streams[2]);
            #pragma omp task
            tests_libieeep1788_set(buffers[3], streams[3]);
            #pragma omp task
            tests_filib(buffers[0], streams[0]);
            #pragma omp task
            tests_libieeep1788_num(buffers[2], streams[2]);

        }
    }
}