// NOTE: This file is automatically generated by test_converter.py using itl tests.


#include "../tests.h"
#include "../tests_common.h"
#include "../tests_ops.h"
#include "../tests_utils.h"

#include <omp.h>

void tests_libieeep1788_elem(cuda_buffer buffer, cudaStream_t stream, cudaEvent_t event) {
    using namespace boost::ut;

    using T = double;
    using I = interval<T>;
    using B = bool;
    using N = int;

    T infinity = std::numeric_limits<T>::infinity();
    I empty    = { infinity, -infinity };
    I entire   = { -infinity, infinity };
    T NaN = ::nan("");

    const int n = 1344; // count of largest test array
    const int n_bytes   = n * sizeof(I);
    const int blockSize = 256;
    [[maybe_unused]] const int numBlocks = (n + blockSize - 1) / blockSize;

    char *d_buffer = buffer.device;

    I *d_xs_  = (I *) d_buffer;
    I *d_ys_  = (I *) d_buffer + 1 * n_bytes;
    I *d_zs_  = (I *) d_buffer + 2 * n_bytes;
    I *d_res_ = (I *) d_buffer + 3 * n_bytes;

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,2.0},
            {-2.5,-0.0},
            {-2.5,0.0},
            {-infinity,-1.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,2.0},
            {-2.5,0.0},
            {-2.5,0.0},
            {-infinity,-1.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_pos_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,2.0},
            {-2.0,-0.0},
            {-2.0,0.0},
            {-infinity,1.0},
            {0.0,-0.0},
            {0.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {-2.0,0.0},
            {0.0,2.0},
            {0.0,2.0},
            {-1.0,infinity},
            {0.0,0.0},
            {-2.0,0.0},
            {-2.0,-1.0},
            {-infinity,-1.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_neg_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 31;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {0.0,0.0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {-3.0,4.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-3.0,4.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0.0,-0.0},
            {0.0,0.0},
            {3.0,4.0},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-1.0,1.0},
            empty,
            entire,
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {-0X1.E666666666657P+0,0X1.0CCCCCCCCCCC5P+1},
            entire,
            {-infinity,6.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,6.0},
            {-infinity,6.0},
            entire,
            {-3.0,4.0},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {0X1.0CCCCCCCCCCC4P+1,0X1.0CCCCCCCCCCC5P+1},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {4.0,infinity},
            {-infinity,6.0},
            {4.0,6.0},
            {4.0,infinity},
            entire,
            {4.0,infinity},
            {4.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_add_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 31;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-0x1.FFFFFFFFFFFFFp1023,2.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {-infinity,2.0},
            {0.0,0.0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-3.0,0x1.FFFFFFFFFFFFFp1023},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0x1.FFFFFFFFFFFFFp1023,4.0},
            {3.0,4.0},
            empty,
            entire,
            entire,
            entire,
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-3.0,4.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0.0,-0.0},
            {-3.0,4.0},
            {0.0,0.0},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-infinity,4.0},
            {3.0,4.0},
            {3.0,infinity},
            {-1.0,1.0},
            empty,
            entire,
            {-1.0,1.0},
            {-1.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-0x1.FFFFFFFFFFFFFp1023,3.0},
            {-0X1.0CCCCCCCCCCC5P+1,0X1.E666666666657P+0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-4.0,3.0},
            {0X1.0CCCCCCCCCCC4P+1,0X1.0CCCCCCCCCCC5P+1},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {-3.0,infinity},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {-3.0,infinity},
            {-3.0,-1.0},
            {-infinity,-1.0},
            {-3.0,infinity},
            {-3.0,infinity},
            entire,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_sub_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 116;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.999999999999AP-4},
            {-1.0,1.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,2.0},
            {-2.0,2.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            empty,
            {-0.0,-0.0},
            {-1.0,10.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-5.0,3.0},
            {-5.0,3.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
            {-0X1.FFFFFFFFFFFFP+0,infinity},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            entire,
            {-0.0,-0.0},
            {-1.0,1.0},
            {0.0,0.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,3.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {-0X1.999999999998EP-3,0X1.999999999998EP-3},
            {-0X1.FFFFFFFFFFFE1P+1,0X1.999999999998EP-3},
            {-0X1.FFFFFFFFFFFE1P+1,-0X1.47AE147AE147BP-7},
            empty,
            {0.0,0.0},
            {-10.0,50.0},
            {-25.0,5.0},
            {-25.0,15.0},
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-3.0,15.0},
            entire,
            entire,
            {0.0,0.0},
            {-infinity,5.0},
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-3.0,infinity},
            entire,
            entire,
            {0.0,0.0},
            {5.0,50.0},
            {-30.0,50.0},
            {-infinity,50.0},
            {5.0,infinity},
            {-30.0,infinity},
            {0.0,0.0},
            {-30.0,-5.0},
            {-infinity,-5.0},
            entire,
            {-30.0,50.0},
            {-10.0,10.0},
            {0.0,0.0},
            {3.0,infinity},
            entire,
            entire,
            {3.0,infinity},
            entire,
            {0.0,0.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            entire,
            {0.0,0.0},
            {-15.0,infinity},
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {-infinity,9.0},
            entire,
            entire,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {-0X1.FFFFFFFFFFFE1P+1,infinity},
            {0.0,0.0},
            {-25.0,-1.0},
            {-25.0,15.0},
            {-25.0,infinity},
            {-infinity,-1.0},
            {-infinity,15.0},
            {0.0,0.0},
            {1.0,15.0},
            {1.0,infinity},
            entire,
            {0.0,0.0},
            {-infinity,-1.0},
            entire,
            entire,
            {-infinity,-1.0},
            entire,
            {0.0,0.0},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            entire,
            entire,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_mul_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 341;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,30.0},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-1.0,1.0},
            {-1.0,2.0},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-15.0,infinity},
            {-2.0,-1.0},
            {-2.0,-1.0},
            {-2.0,-1.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-0.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,-15.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,0.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-30.0,15.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-1.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,-15.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {-infinity,15.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,30.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,3.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,30.0},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            {15.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            empty,
            {10.0,infinity},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,10.0},
            {-10.0,-3.0},
            {0.0,10.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {1.0,3.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-infinity,-10.0},
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            entire,
            {-0.0,-0.0},
            {-1.0,-0.1},
            {-1.0,1.0},
            {0.0,0.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,3.0},
            {-0.0,infinity},
            {-3.0,-0.0},
            {-3.0,0.0},
            {-3.0,3.0},
            {-3.0,infinity},
            {-5.0,-3.0},
            {-infinity,-0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,3.0},
            {0.0,infinity},
            {3.0,5.0},
            {3.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-10.0,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-0X1.999999999999AP-4,0X1.999999999999AP-3},
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-infinity,5.0},
            entire,
            {-infinity,5.0},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-5.0,infinity},
            {-5.0,infinity},
            entire,
            {-infinity,-0X1.9999999999999P-4},
            {0X1.9999999999999P-4,0X1.5555555555556P-1},
            {-infinity,-0X1.9999999999999P-4},
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-10.0,0.0},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {5.0,infinity},
            {5.0,infinity},
            entire,
            entire,
            {3.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {-10.0,-3.0},
            {-10.0,0.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,10.0},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-10.0,0.0},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,10.0},
            entire,
            {-5.0,10.0},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-10.0,5.0},
            {-10.0,5.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            {-infinity,-0X1.5555555555555P-2},
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {5.0,infinity},
            {5.0,infinity},
            entire,
            entire,
            {3.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,-5.0},
            {-infinity,0.0},
            {-infinity,-3.0},
            {-infinity,0.0},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,infinity},
            entire,
            {-5.0,infinity},
            entire,
            entire,
            empty,
            entire,
            entire,
            {-infinity,5.0},
            {-infinity,5.0},
            entire,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-10.0,0.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            entire,
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            entire,
            {-0X1.3333333333334P-2,0.0},
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {-infinity,-5.0},
            {-infinity,-5.0},
            entire,
            entire,
            {-10.0,-3.0},
            {-infinity,0.0},
            {-10.0,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {3.0,10.0},
            {0.0,10.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {-infinity,-5.0},
            {-infinity,-5.0},
            entire,
            entire,
            {-infinity,-3.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {5.0,infinity},
            {0.0,infinity},
            {3.0,infinity},
            {0.0,infinity},
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_div_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 18;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,10.0},
            {-0.0,infinity},
            {-10.0,-0.0},
            {-10.0,0.0},
            {-10.0,10.0},
            {-10.0,infinity},
            {-50.0,-10.0},
            {-infinity,-0.0},
            {-infinity,-10.0},
            {-infinity,0.0},
            {-infinity,10.0},
            {0.0,0.0},
            {0.0,10.0},
            {0.0,infinity},
            {10.0,50.0},
            {10.0,infinity},
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            empty,
            {0X1.9999999999999P-4,infinity},
            {0.0,infinity},
            {-infinity,-0X1.9999999999999P-4},
            {-infinity,-0X1.9999999999999P-4},
            entire,
            entire,
            {-0X1.999999999999AP-4,-0X1.47AE147AE147AP-6},
            {-infinity,0.0},
            {-0X1.999999999999AP-4,0.0},
            {-infinity,0.0},
            entire,
            empty,
            {0X1.9999999999999P-4,infinity},
            {0.0,infinity},
            {0X1.47AE147AE147AP-6,0X1.999999999999AP-4},
            {0.0,0X1.999999999999AP-4},
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_recip_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 12;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,1.0},
            {-0X1.FFFFFFFFFFFFP+0,-0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-1.0,1.0},
            {-5.0,-0.0},
            {-5.0,0.0},
            {-5.0,3.0},
            {-infinity,-0x0.0000000000001p-1022},
            {0.0,1.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,1.0},
            {0X1.FFFFFFFFFFFEP+1,0X1.FFFFFFFFFFFE1P+1},
            {0.0,0X1.FFFFFFFFFFFE1P+1},
            {0.0,1.0},
            {0.0,25.0},
            {0.0,25.0},
            {0.0,25.0},
            {0.0,infinity},
            {0.0,1.0},
            {0X1.47AE147AE147BP-7,0X1.47AE147AE147CP-7},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_sqr_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 13;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,1.0},
            {-0.0,25.0},
            {-0X1.FFFFFFFFFFFFP+0,0X1.999999999999AP-4},
            {-1.0,1.0},
            {-5.0,25.0},
            {-5.0,infinity},
            {-infinity,-0x0.0000000000001p-1022},
            {0.0,1.0},
            {0.0,25.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,1.0},
            {0.0,5.0},
            {0.0,0X1.43D136248491P-2},
            {0.0,1.0},
            {0.0,5.0},
            {0.0,infinity},
            empty,
            {0.0,1.0},
            {0.0,5.0},
            {0X1.43D136248490FP-2,0X1.43D136248491P-2},
            {0X1.43D136248490FP-2,0X1.6A09E667F3BC7P+0},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_sqrt_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 564;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.5,-0.1},
            {-0.5,-0.1},
            {-0.5,0.2},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,-5.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-10.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,-3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.1,0.5},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-infinity,3.0},
            {2.0,3.0},
            {-5.0,3.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-1.0,10.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-5.0,3.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,3.0},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-5.0,infinity},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {-infinity,3.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_zs = new (h_buffer) I[n]{
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0.1,0.1},
            {-0.1,0.1},
            {-0.1,0.1},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0.1,0.1},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0X1.999999999999AP+0,infinity},
            {-0X1.999999999999AP+0,-0X1.999999999999AP-4},
            {-0X1.999999999999AP+0,0X1.4CCCCCCCCCCCDP+1},
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-12.0,52.0},
            {-12.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-27.0,7.0},
            {-27.0,infinity},
            {-infinity,7.0},
            empty,
            entire,
            {-27.0,17.0},
            {-27.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-5.0,17.0},
            {-5.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,7.0},
            entire,
            {-infinity,7.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-5.0,infinity},
            {-5.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {3.0,52.0},
            {3.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-32.0,52.0},
            {-32.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-infinity,52.0},
            entire,
            {-infinity,52.0},
            empty,
            entire,
            {3.0,infinity},
            {3.0,infinity},
            entire,
            empty,
            entire,
            {-32.0,infinity},
            {-32.0,infinity},
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-32.0,-3.0},
            {-32.0,infinity},
            {-infinity,-3.0},
            empty,
            entire,
            {-infinity,-3.0},
            entire,
            {-infinity,-3.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-32.0,52.0},
            {-32.0,infinity},
            {-infinity,52.0},
            empty,
            entire,
            {-12.0,12.0},
            {-12.0,infinity},
            {-infinity,12.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {1.0,infinity},
            {1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,-1.0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            {-infinity,-1.0},
            entire,
            {-infinity,-1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-17.0,infinity},
            {-17.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,11.0},
            entire,
            {-infinity,11.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-0X1.4CCCCCCCCCCCDP+1,0X1.999999999999AP+0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-27.0,1.0},
            {-27.0,infinity},
            {-infinity,1.0},
            empty,
            entire,
            {-27.0,17.0},
            {-27.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            {-27.0,infinity},
            {-27.0,infinity},
            entire,
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            {-infinity,17.0},
            entire,
            {-infinity,17.0},
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-1.0,17.0},
            {-1.0,infinity},
            {-infinity,17.0},
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-infinity,1.0},
            entire,
            {-infinity,1.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            {-1.0,infinity},
            {-1.0,infinity},
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            {-2.0,2.0},
            {-2.0,infinity},
            {-infinity,2.0},
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_zs = (I *)d_zs_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_zs, h_zs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_fma_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_zs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys, h_zs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 163;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-1.9,-0.33},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-324.3,2.5},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-7451.145,-7451.145},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0.01,2.33},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            {13.1,13.1},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(N));
        N *h_ys = new (h_buffer) N[n]{
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
            -1,
            -2,
            -3,
            -7,
            -8,
            0,
            1,
            2,
            3,
            7,
            8,
        };

        h_buffer += align_to(n * sizeof(N), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            empty,
            empty,
            empty,
            empty,
            empty,
            {1.0,1.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {-0X0.4000000000001P-1022,-0X0.4P-1022},
            {0X0P+0,0X0.0000000000001P-1022},
            {-0X0.0000000000001P-1022,-0X0P+0},
            {-0X0.0000000000001P-1022,-0X0P+0},
            {0X0P+0,0X0.0000000000001P-1022},
            {1.0,1.0},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {-0X1.83E0F83E0F83EP+1,-0X1.0D79435E50D79P-1},
            {0X1.1BA81104F6C8P-2,0X1.25D8FA1F801E1P+3},
            {-0X1.BD393CE9E8E7CP+4,-0X1.2A95F6F7C066CP-3},
            {-0X1.254CDD3711DDBP+11,-0X1.6E95C4A761E19P-7},
            {0X1.81E104E61630DP-8,0X1.BC64F21560E34P+12},
            {-1.9,-0.33},
            {0X1.BE0DED288CE7P-4,0X1.CE147AE147AE1P+1},
            {-0X1.B6F9DB22D0E55P+2,-0X1.266559F6EC5B1P-5},
            {-0X1.658C775099757P+6,-0X1.BEE30301BF47AP-12},
            {0X1.26F1FCDD502A3P-13,0X1.53ABD7BFC4FC6P+7},
            entire,
            {0X1.3F0C482C977C9P-17,infinity},
            entire,
            entire,
            {0X1.34CC3764D1E0CP-67,infinity},
            {1.0,1.0},
            {-324.3,2.5},
            {0.0,0X1.9AD27D70A3D72P+16},
            {-0X1.0436D2F418938P+25,0X1.F4P+3},
            {-0X1.4F109959E6D7FP+58,0X1.312DP+9},
            {0.0,0X1.A87587109655P+66},
            {-0X1.197422C9048BFP-13,-0X1.197422C9048BEP-13},
            {0X1.3570290CD6E14P-26,0X1.3570290CD6E15P-26},
            {-0X1.54347DED91B19P-39,-0X1.54347DED91B18P-39},
            {-0X1.F10F41FB8858FP-91,-0X1.F10F41FB8858EP-91},
            {0X1.113D9EF0A99ACP-103,0X1.113D9EF0A99ADP-103},
            {1.0,1.0},
            {-7451.145,-7451.145},
            {0X1.A794A4E7CFAADP+25,0X1.A794A4E7CFAAEP+25},
            {-0X1.81460637B9A3DP+38,-0X1.81460637B9A3CP+38},
            {-0X1.07B1DA32F9B59P+90,-0X1.07B1DA32F9B58P+90},
            {0X1.DFB1BB622E70DP+102,0X1.DFB1BB622E70EP+102},
            {-infinity,0.0},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {1.0,1.0},
            {-infinity,0.0},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {-infinity,0.0},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            {1.0,1.0},
            {-infinity,0.0},
            {0.0,infinity},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            {1.0,1.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.B77C278DBBE13P-2,0X1.9P+6},
            {0X1.793D85EF38E47P-3,0X1.388P+13},
            {0X1.43CFBA61AACABP-4,0X1.E848P+19},
            {0X1.5F934D64162A9P-9,0X1.6BCC41E9P+46},
            {0X1.2DC80DB11AB7CP-10,0X1.1C37937E08P+53},
            {0.01,2.33},
            {0X1.A36E2EB1C432CP-14,0X1.5B7318FC50482P+2},
            {0X1.0C6F7A0B5ED8DP-20,0X1.94C75E6362A6P+3},
            {0X1.6849B86A12B9BP-47,0X1.74D0373C76313P+8},
            {0X1.CD2B297D889BDP-54,0X1.B253D9F33CE4DP+9},
            {0X0.4P-1022,0X0.4000000000001P-1022},
            {0X0P+0,0X0.0000000000001P-1022},
            {0X0P+0,0X0.0000000000001P-1022},
            {0X0P+0,0X0.0000000000001P-1022},
            {0X0P+0,0X0.0000000000001P-1022},
            {1.0,1.0},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {0X1.38ABF82EE6986P-4,0X1.38ABF82EE6987P-4},
            {0X1.7DE3A077D1568P-8,0X1.7DE3A077D1569P-8},
            {0X1.D26DF4D8B1831P-12,0X1.D26DF4D8B1832P-12},
            {0X1.037D76C912DBCP-26,0X1.037D76C912DBDP-26},
            {0X1.3CEF39247CA6DP-30,0X1.3CEF39247CA6EP-30},
            {1.0,1.0},
            {13.1,13.1},
            {0X1.573851EB851EBP+7,0X1.573851EB851ECP+7},
            {0X1.1902E978D4FDEP+11,0X1.1902E978D4FDFP+11},
            {0X1.F91D1B185493BP+25,0X1.F91D1B185493CP+25},
            {0X1.9D8FD495853F5P+29,0X1.9D8FD495853F6P+29},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
            {1.0,1.0},
            entire,
            {0.0,infinity},
            entire,
            entire,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        N *d_ys = (N *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(N), cudaMemcpyHostToDevice, stream));
        tests_pown_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 1;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 1344;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,0.5},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,1.5},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.0,infinity},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,0.5},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.0},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,1.5},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,-0.1},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,1.5},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,0.5},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,1.5},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {0.5,infinity},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,1.5},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,1.5},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            {1.1,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.0},
            {-0.1,-0.1},
            {-0.1,0.0},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.0},
            {-0.1,-0.1},
            {-0.1,0.0},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.0},
            {-0.1,-0.1},
            {-0.1,0.0},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.0},
            {-0.1,-0.1},
            {-0.1,0.0},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,1.0},
            {-0.0,2.5},
            {-0.0,infinity},
            {-0.1,-0.1},
            {-0.1,0.1},
            {-0.1,1.0},
            {-0.1,2.5},
            {-0.1,infinity},
            {-1.0,-0.0},
            {-1.0,-0.1},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,0.1},
            {-1.0,1.0},
            {-1.0,2.5},
            {-1.0,infinity},
            {-2.5,-0.0},
            {-2.5,-0.1},
            {-2.5,-1.0},
            {-2.5,-2.5},
            {-2.5,0.0},
            {-2.5,0.1},
            {-2.5,1.0},
            {-2.5,2.5},
            {-2.5,infinity},
            {-infinity,-0.0},
            {-infinity,-0.1},
            {-infinity,-1.0},
            {-infinity,-2.5},
            {-infinity,0.0},
            {-infinity,0.1},
            {-infinity,1.0},
            {-infinity,2.5},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,2.5},
            {0.0,infinity},
            {0.1,0.1},
            {0.1,1.0},
            {0.1,2.5},
            {0.1,infinity},
            {1.0,1.0},
            {1.0,2.5},
            {1.0,infinity},
            {2.5,2.5},
            {2.5,infinity},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,infinity},
            {-3.0,5.0},
            {-5.0,-5.0},
            {-infinity,-0.0},
            {-infinity,-1.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {1.0,infinity},
            {5.0,5.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0X1.125FBEE250664P+0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0X1.6A09E667F3BCDP-3},
            {0.0,0X1.6A09E667F3BCDP-3},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0X1.EBA7C9E4D31E9P-1,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,0X1.0A97DCE72A0CBP+0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0X1.125FBEE250664P+0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0X1.6A09E667F3BCDP-3},
            {0.0,0X1.6A09E667F3BCDP-3},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0X1.EBA7C9E4D31E9P-1,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,0X1.0A97DCE72A0CBP+0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0.0},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0X1.125FBEE250664P+0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0.5},
            {0.0,0X1.6A09E667F3BCDP-3},
            {0.0,0X1.6A09E667F3BCDP-3},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0X1.EBA7C9E4D31E9P-1,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0X1.5555555555555P-1,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,0X1.0A97DCE72A0CBP+0},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,1.5},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.0,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0X1.999999999999AP-4,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            {0X1.125FBEE250664P+0,0X1.4248EF8FC2604P+0},
            {0X1.96B230BCDC434P-1,0X1.4248EF8FC2604P+0},
            {0X1.999999999999AP-4,0X1.4248EF8FC2604P+0},
            {0X1.9E7C6E43390B7P-9,0X1.4248EF8FC2604P+0},
            {0.0,0X1.4248EF8FC2604P+0},
            {1.0,0X1.4P+3},
            {0X1.125FBEE250664P+0,0X1.4P+3},
            {0X1P+1,0X1.4P+3},
            {1.0,0X1.4P+3},
            {0X1.96B230BCDC434P-1,0X1.4P+3},
            {0X1.999999999999AP-4,0X1.4P+3},
            {0X1.9E7C6E43390B7P-9,0X1.4P+3},
            {0.0,0X1.4P+3},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {0X1.125FBEE250664P+0,0X1.3C3A4EDFA9758P+8},
            {0X1P+1,0X1.3C3A4EDFA9758P+8},
            {0X1.6A09E667F3BCCP+2,0X1.3C3A4EDFA9758P+8},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {0X1.96B230BCDC434P-1,0X1.3C3A4EDFA9758P+8},
            {0X1.999999999999AP-4,0X1.3C3A4EDFA9758P+8},
            {0X1.9E7C6E43390B7P-9,0X1.3C3A4EDFA9758P+8},
            {0.0,0X1.3C3A4EDFA9758P+8},
            {1.0,infinity},
            {0X1.125FBEE250664P+0,infinity},
            {0X1P+1,infinity},
            {0X1.6A09E667F3BCCP+2,infinity},
            {1.0,infinity},
            {0X1.96B230BCDC434P-1,infinity},
            {0X1.999999999999AP-4,infinity},
            {0X1.9E7C6E43390B7P-9,infinity},
            {1.0,1.0},
            {0X1.999999999999AP-4,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            {0X1.96B230BCDC434P-1,0X1.DDB680117AB13P-1},
            {0X1.999999999999AP-4,0X1.DDB680117AB13P-1},
            {0X1.9E7C6E43390B7P-9,0X1.DDB680117AB13P-1},
            {0.0,0X1.DDB680117AB13P-1},
            {0X1.999999999999AP-4,0X1P-1},
            {0X1.9E7C6E43390B7P-9,0X1P-1},
            {0.0,0X1P-1},
            {0X1.9E7C6E43390B7P-9,0X1.6A09E667F3BCDP-3},
            {0.0,0X1.6A09E667F3BCDP-3},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0X1.999999999999AP-4,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            {1.0,0X1.4248EF8FC2604P+0},
            {1.0,0X1.4248EF8FC2604P+0},
            {1.0,0X1.4248EF8FC2604P+0},
            {0X1.96B230BCDC434P-1,0X1.4248EF8FC2604P+0},
            {0X1.999999999999AP-4,0X1.4248EF8FC2604P+0},
            {0X1.9E7C6E43390B7P-9,0X1.4248EF8FC2604P+0},
            {0.0,0X1.4248EF8FC2604P+0},
            {1.0,0X1.4P+3},
            {1.0,0X1.4P+3},
            {1.0,0X1.4P+3},
            {1.0,0X1.4P+3},
            {0X1.96B230BCDC434P-1,0X1.4P+3},
            {0X1.999999999999AP-4,0X1.4P+3},
            {0X1.9E7C6E43390B7P-9,0X1.4P+3},
            {0.0,0X1.4P+3},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {1.0,0X1.3C3A4EDFA9758P+8},
            {0X1.96B230BCDC434P-1,0X1.3C3A4EDFA9758P+8},
            {0X1.999999999999AP-4,0X1.3C3A4EDFA9758P+8},
            {0X1.9E7C6E43390B7P-9,0X1.3C3A4EDFA9758P+8},
            {0.0,0X1.3C3A4EDFA9758P+8},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0X1.96B230BCDC434P-1,infinity},
            {0X1.999999999999AP-4,infinity},
            {0X1.9E7C6E43390B7P-9,infinity},
            {1.0,1.0},
            {0X1.999999999999AP-4,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            {0X1.96B230BCDC434P-1,1.0},
            {0X1.999999999999AP-4,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            {0X1.999999999999AP-4,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            {0X1.9E7C6E43390B7P-9,1.0},
            {0.0,1.0},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {0.5,1.5},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0X1.EBA7C9E4D31E9P-1,0X1.125FBEE250665P+0},
            {0X1.DDB680117AB12P-1,0X1.125FBEE250665P+0},
            {0X1P-1,0X1.8P+0},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0X0P+0,infinity},
            {0X1.5555555555555P-1,0X1P+1},
            {0X1.5555555555555P-1,0X1P+1},
            {0X1.5555555555555P-1,0X1P+1},
            {0X1.5555555555555P-1,0X1P+1},
            {0X1.5555555555555P-1,0X1P+1},
            {0X1P-1,0X1P+1},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0X0P+0,infinity},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.7398BF1D1EE6FP-2,0X1.6A09E667F3BCDP+2},
            {0X1.6A09E667F3BCCP-3,0X1.6A09E667F3BCDP+2},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {1.0,1.0},
            {0.5,1.5},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0X1.DDB680117AB12P-1,0X1.0A97DCE72A0CBP+0},
            {0.5,1.5},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0.5,1.5},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            {0X1.6A09E667F3BCCP-3,0X1.60B9FD68A4555P+1},
            {0.0,infinity},
            empty,
            {0X0P+0,infinity},
            {1.0,1.0},
            {0.5,infinity},
            {0X1.6A09E667F3BCCP-3,infinity},
            {0.0,infinity},
            {0.0,0X1.125FBEE250665P+0},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,0X1P+1},
            {0.0,0X1P+1},
            {0.0,0X1P+1},
            {0.0,0X1P+1},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,0X1.6A09E667F3BCDP+2},
            {0.0,0X1.6A09E667F3BCDP+2},
            {0.0,0X1.6A09E667F3BCDP+2},
            {0.0,0X1.6A09E667F3BCDP+2},
            {0.0,0X1.6A09E667F3BCDP+2},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {0.0,infinity},
            {1.0,1.0},
            {0.5,infinity},
            {0X1.6A09E667F3BCCP-3,infinity},
            {0.0,infinity},
            {0X1.DDB680117AB12P-1,infinity},
            {0.5,infinity},
            {0X1.6A09E667F3BCCP-3,infinity},
            {0.0,infinity},
            {0.5,infinity},
            {0X1.6A09E667F3BCCP-3,infinity},
            {0.0,infinity},
            {0X1.6A09E667F3BCCP-3,infinity},
            {0.0,infinity},
            empty,
            {0.0,infinity},
            {1.0,1.0},
            {1.0,0X1.8P+0},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            {0X1.EBA7C9E4D31E9P-1,1.0},
            {0X1.EBA7C9E4D31E9P-1,0X1.0A97DCE72A0CBP+0},
            {0X1.EBA7C9E4D31E9P-1,0X1.8P+0},
            {0X1.EBA7C9E4D31E9P-1,0X1.60B9FD68A4555P+1},
            {0X1.EBA7C9E4D31E9P-1,infinity},
            {0X1.5555555555555P-1,1.0},
            {0X1.5555555555555P-1,1.0},
            {0X1.5555555555555P-1,1.0},
            {0X1.5555555555555P-1,1.0},
            {0X1.5555555555555P-1,0X1.0A97DCE72A0CBP+0},
            {0X1.5555555555555P-1,0X1.8P+0},
            {0X1.5555555555555P-1,0X1.60B9FD68A4555P+1},
            {0X1.5555555555555P-1,infinity},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,0X1.0A97DCE72A0CBP+0},
            {0X1.7398BF1D1EE6FP-2,0X1.8P+0},
            {0X1.7398BF1D1EE6FP-2,0X1.60B9FD68A4555P+1},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,0X1.0A97DCE72A0CBP+0},
            {0X0P+0,0X1.8P+0},
            {0X0P+0,0X1.60B9FD68A4555P+1},
            {1.0,1.0},
            {1.0,0X1.8P+0},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            {1.0,0X1.0A97DCE72A0CBP+0},
            {1.0,0X1.8P+0},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            {1.0,0X1.8P+0},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            empty,
            {0X0P+0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            empty,
            {0X0P+0,infinity},
            {1.0,1.0},
            {1.0,0X1.8P+0},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            {0X1.EBA7C9E4D31E9P-1,0X1.FB24AF5281928P-1},
            {0X1.EBA7C9E4D31E9P-1,0X1.0A97DCE72A0CBP+0},
            {0X1.EBA7C9E4D31E9P-1,0X1.8P+0},
            {0X1.EBA7C9E4D31E9P-1,0X1.60B9FD68A4555P+1},
            {0X1.EBA7C9E4D31E9P-1,infinity},
            {0X1.5555555555555P-1,1.0},
            {0X1.5555555555555P-1,0X1.FB24AF5281928P-1},
            {0X1.5555555555555P-1,0X1.D1745D1745D17P-1},
            {0X1.5555555555555P-1,1.0},
            {0X1.5555555555555P-1,0X1.0A97DCE72A0CBP+0},
            {0X1.5555555555555P-1,0X1.8P+0},
            {0X1.5555555555555P-1,0X1.60B9FD68A4555P+1},
            {0X1.5555555555555P-1,infinity},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,0X1.FB24AF5281928P-1},
            {0X1.7398BF1D1EE6FP-2,0X1.D1745D1745D17P-1},
            {0X1.7398BF1D1EE6FP-2,0X1.9372D999784C8P-1},
            {0X1.7398BF1D1EE6FP-2,1.0},
            {0X1.7398BF1D1EE6FP-2,0X1.0A97DCE72A0CBP+0},
            {0X1.7398BF1D1EE6FP-2,0X1.8P+0},
            {0X1.7398BF1D1EE6FP-2,0X1.60B9FD68A4555P+1},
            {0X1.7398BF1D1EE6FP-2,infinity},
            {0X0P+0,1.0},
            {0X0P+0,0X1.FB24AF5281928P-1},
            {0X0P+0,0X1.D1745D1745D17P-1},
            {0X0P+0,0X1.9372D999784C8P-1},
            {0X0P+0,1.0},
            {0X0P+0,0X1.0A97DCE72A0CBP+0},
            {0X0P+0,0X1.8P+0},
            {0X0P+0,0X1.60B9FD68A4555P+1},
            {1.0,1.0},
            {1.0,0X1.8P+0},
            {1.0,0X1.60B9FD68A4555P+1},
            {1.0,infinity},
            {0X1.02739C65D58BFP+0,0X1.0A97DCE72A0CBP+0},
            {0X1.02739C65D58BFP+0,0X1.8P+0},
            {0X1.02739C65D58BFP+0,0X1.60B9FD68A4555P+1},
            {0X1.02739C65D58BFP+0,infinity},
            {0X1.199999999999AP+0,0X1.8P+0},
            {0X1.199999999999AP+0,0X1.60B9FD68A4555P+1},
            {0X1.199999999999AP+0,infinity},
            {0X1.44E1080833B25P+0,0X1.60B9FD68A4555P+1},
            {0X1.44E1080833B25P+0,infinity},
            empty,
            {0X0P+0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0X0P+0,0X1.FB24AF5281928P-1},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,0X1.FB24AF5281928P-1},
            {0X0P+0,0X1.D1745D1745D17P-1},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,0X1.FB24AF5281928P-1},
            {0X0P+0,0X1.D1745D1745D17P-1},
            {0X0P+0,0X1.9372D999784C8P-1},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,1.0},
            {0X0P+0,0X1.FB24AF5281928P-1},
            {0X0P+0,0X1.D1745D1745D17P-1},
            {0X0P+0,0X1.9372D999784C8P-1},
            {0X0P+0,1.0},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {0X0P+0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {0X1.02739C65D58BFP+0,infinity},
            {0X1.02739C65D58BFP+0,infinity},
            {0X1.02739C65D58BFP+0,infinity},
            {0X1.02739C65D58BFP+0,infinity},
            {0X1.199999999999AP+0,infinity},
            {0X1.199999999999AP+0,infinity},
            {0X1.199999999999AP+0,infinity},
            {0X1.44E1080833B25P+0,infinity},
            {0X1.44E1080833B25P+0,infinity},
            empty,
            {0X0P+0,infinity},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_pow_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 1;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 19;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,0X1.62E42FEFA39EP+9},
            {-0.0,infinity},
            {-0X1.6232BDD7ABCD3P+8,-0.0},
            {-0X1.6232BDD7ABCD3P+8,0.0},
            {-0X1.6232BDD7ABCD3P+8,0X1.62E42FEFA39EP+9},
            {-0X1.6232BDD7ABCD3P+8,1.0},
            {-0X1.6232BDD7ABCD3P+9,0X1.62E42FEFA39EP+9},
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,0X1.62E42FEFA39FP+9},
            {0.0,0X1.62E42FEFA39EP+9},
            {0.0,infinity},
            {0X1.62E42FEFA39FP+9,0X1.62E42FEFA39FP+9},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {1.0,5.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {1.0,0X1.FFFFFFFFFC32BP+1023},
            {1.0,infinity},
            {0X1.FFFFFFFFFFE7BP-512,1.0},
            {0X1.FFFFFFFFFFE7BP-512,1.0},
            {0X1.FFFFFFFFFFE7BP-512,0X1.FFFFFFFFFC32BP+1023},
            {0X1.FFFFFFFFFFE7BP-512,0X1.5BF0A8B14576AP+1},
            {0X0.FFFFFFFFFFE7BP-1022,0X1.FFFFFFFFFC32BP+1023},
            {0X1.2797F0A337A5FP-5,0X1.86091CC9095C5P+2},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,infinity},
            {1.0,0X1.FFFFFFFFFC32BP+1023},
            {1.0,infinity},
            {0X1.FFFFFFFFFFFFFP+1023,infinity},
            {0X1.EF461A783114CP+16,0X1.691D36C6B008CP+37},
            {0X1.1337E9E45812AP+1,0X1.805A5C88021B6P+142},
            {0X1.5BF0A8B145769P+1,0X1.28D389970339P+7},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_exp_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 18;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,1023.0},
            {-0.0,infinity},
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {-1022.0,-0.0},
            {-1022.0,0.0},
            {-1022.0,1.0},
            {-1022.0,1023.0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,1024.0},
            {0.0,1023.0},
            {0.0,infinity},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {1.0,5.0},
            {1024.0,1024.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {1.0,0X1P+1023},
            {1.0,infinity},
            {0X1.9999999999998P-4,0X1.C000000000001P+1},
            {0X1P-1022,1.0},
            {0X1P-1022,1.0},
            {0X1P-1022,2.0},
            {0X1P-1022,0X1P+1023},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,infinity},
            {1.0,0X1P+1023},
            {1.0,infinity},
            {0X1.AEA0000721857P+11,0X1.FCA0555555559P+25},
            {0X1.B333333333332P+0,0X1.C81FD88228B4FP+98},
            {2.0,32.0},
            {0X1.FFFFFFFFFFFFFP+1023,infinity},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_exp2_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 19;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,0X1.34413509F79FEP+8},
            {-0.0,infinity},
            {-0X1.22P+7,-0.0},
            {-0X1.22P+7,0.0},
            {-0X1.22P+7,0X1.34413509F79FEP+8},
            {-0X1.22P+7,1.0},
            {-0X1.33A7146F72A42P+8,0X1.34413509F79FEP+8},
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {-infinity,0X1.34413509F79FFP+8},
            {0.0,0X1.34413509F79FEP+8},
            {0.0,infinity},
            {0X1.34413509F79FFP+8,0X1.34413509F79FFP+8},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {1.0,5.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {1.0,0X1.FFFFFFFFFFBA1P+1023},
            {1.0,infinity},
            {0X1.3FAAC3E3FA1F3P-482,1.0},
            {0X1.3FAAC3E3FA1F3P-482,1.0},
            {0X1.3FAAC3E3FA1F3P-482,0X1.FFFFFFFFFFBA1P+1023},
            {0X1.3FAAC3E3FA1F3P-482,10.0},
            {0X0.FFFFFFFFFFFE3P-1022,0X1.FFFFFFFFFFBA1P+1023},
            {0X1.F3A8254311F9AP-12,0X1.00B18AD5B7D56P+6},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,infinity},
            {1.0,0X1.FFFFFFFFFFBA1P+1023},
            {1.0,infinity},
            {0X1.FFFFFFFFFFFFFP+1023,infinity},
            {0X1.0608D2279A811P+39,0X1.43AF5D4271CB8P+86},
            {0X1.75014B7296807P+2,0X1.3EEC1D47DFB2BP+328},
            {10.0,100000.0},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_exp10_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 21;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,0x1.FFFFFFFFFFFFFp1023},
            {-0.0,1.0},
            {-0.0,infinity},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0x1.FFFFFFFFFFFFFp1023},
            {0.0,1.0},
            {0.0,infinity},
            {0X1.5BF0A8B145769P+1,0X1.5BF0A8B145769P+1},
            {0X1.5BF0A8B145769P+1,32.0},
            {0X1.5BF0A8B14576AP+1,0X1.5BF0A8B14576AP+1},
            {0X1.999999999999AP-4,0X1.CP+1},
            {0X1.AEA0000721861P+11,0X1.FCA055555554CP+25},
            {0X1.B333333333333P+0,0X1.C81FD88228B2FP+98},
            {0x0.0000000000001p-1022,0X1.5BF0A8B14576AP+1},
            {0x0.0000000000001p-1022,0x1.FFFFFFFFFFFFFp1023},
            {0x0.0000000000001p-1022,1.0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-infinity,0X1.62E42FEFA39FP+9},
            {-infinity,0.0},
            entire,
            empty,
            empty,
            {-infinity,0X1.62E42FEFA39FP+9},
            {-infinity,0.0},
            entire,
            {0X1.FFFFFFFFFFFFFP-1,0X1P+0},
            {0X1.FFFFFFFFFFFFFP-1,0X1.BB9D3BEB8C86CP+1},
            {0X1P+0,0X1.0000000000001P+0},
            {-0X1.26BB1BBB55516P+1,0X1.40B512EB53D6P+0},
            {0X1.04A1363DB1E63P+3,0X1.203E52C0256B5P+4},
            {0X1.0FAE81914A99P-1,0X1.120627F6AE7F1P+6},
            {-0x1.74385446D71C4p9,0X1.0000000000001P+0},
            {-0x1.74385446D71C4p9,+0x1.62E42FEFA39Fp9},
            {-0x1.74385446D71C4p9,0.0},
            {0.0,0X1.62E42FEFA39FP+9},
            {0.0,infinity},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_log_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 19;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,0x1.FFFFFFFFFFFFFp1023},
            {-0.0,1.0},
            {-0.0,infinity},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0x1.FFFFFFFFFFFFFp1023},
            {0.0,1.0},
            {0.0,infinity},
            {0X1.999999999999AP-4,0X1.CP+1},
            {0X1.AEA0000721861P+11,0X1.FCA055555554CP+25},
            {0X1.B333333333333P+0,0X1.C81FD88228B2FP+98},
            {0x0.0000000000001p-1022,0x1.FFFFFFFFFFFFFp1023},
            {0x0.0000000000001p-1022,1.0},
            {0x0.0000000000001p-1022,2.0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,infinity},
            {2.0,32.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-infinity,1024.0},
            {-infinity,0.0},
            entire,
            empty,
            empty,
            {-infinity,1024.0},
            {-infinity,0.0},
            entire,
            {-0X1.A934F0979A372P+1,0X1.CEAECFEA8085AP+0},
            {0X1.78025C8B3FD39P+3,0X1.9FD8EEF3FA79BP+4},
            {0X1.87F42B972949CP-1,0X1.8B55484710029P+6},
            {-1074.0,1024.0},
            {-1074.0,0.0},
            {-1074.0,1.0},
            {0.0,1024.0},
            {0.0,infinity},
            {1.0,5.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_log2_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 20;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,0x1.FFFFFFFFFFFFFp1023},
            {-0.0,1.0},
            {-0.0,infinity},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0x1.FFFFFFFFFFFFFp1023},
            {0.0,1.0},
            {0.0,infinity},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {0X1.999999999999AP-4,0X1.CP+1},
            {0X1.AEA0000721861P+11,0X1.FCA055555554CP+25},
            {0X1.B333333333333P+0,0X1.C81FD88228B2FP+98},
            {0x0.0000000000001p-1022,0x1.FFFFFFFFFFFFFp1023},
            {0x0.0000000000001p-1022,1.0},
            {0x0.0000000000001p-1022,10.0},
            {1.0,0x1.FFFFFFFFFFFFFp1023},
            {1.0,infinity},
            {10.0,100000.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-infinity,0X1.34413509F79FFP+8},
            {-infinity,0.0},
            entire,
            empty,
            empty,
            {-infinity,0X1.34413509F79FFP+8},
            {-infinity,0.0},
            entire,
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1P+0,0X1.1690163290F4P-1},
            {0X1.C4C29DD829191P+1,0X1.F4BAEBBA4FA4P+2},
            {0X1.D7F59AA5BECB9P-3,0X1.DC074D84E5AABP+4},
            {-0x1.434E6420F4374p+8,+0x1.34413509F79FFp+8},
            {-0x1.434E6420F4374p+8,0.0},
            {-0x1.434E6420F4374p+8,1.0},
            {0.0,0X1.34413509F79FFP+8},
            {0.0,infinity},
            {1.0,5.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_log10_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 52;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0X1.921FB54442D18P+0},
            {-0.0,0X1.921FB54442D18P+1},
            {-0.0,0X1.921FB54442D19P+0},
            {-0.0,0X1.921FB54442D19P+1},
            {-0.0,infinity},
            {-0.7,0.1},
            {-0X1.921FB54442D18P+0,-0.0},
            {-0X1.921FB54442D18P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+0,0.0},
            {-0X1.921FB54442D18P+0,0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D18P+1,-0.0},
            {-0X1.921FB54442D18P+1,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+1,-0X1.921FB54442D18P+1},
            {-0X1.921FB54442D18P+1,-0X1.921FB54442D19P+0},
            {-0X1.921FB54442D18P+1,0.0},
            {-0X1.921FB54442D19P+0,-0.0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+1,-0.0},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D18P+1},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0.0},
            {-3.2,-2.9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,0X1.921FB54442D18P+0},
            {0.0,0X1.921FB54442D18P+1},
            {0.0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+1},
            {0.0,infinity},
            {0X1.921FB54442D18P+0,0X1.921FB54442D18P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D18P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D18P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D19P+0,0X1.921FB54442D18P+1},
            {0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D19P+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {1.0,2.0},
            {2.0,3.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0X1P+0},
            {0.0,1.0},
            {0.0,0X1P+0},
            {-0X1.72CECE675D1FDP-52,1.0},
            {-1.0,1.0},
            {-0X1.49D6E694619B9P-1,0X1.98EAECB8BCB2DP-4},
            {-0X1P+0,0.0},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1P+0,0.0},
            {-0X1P+0,0X1P+0},
            {-0X1P+0,0X1P+0},
            {-1.0,0.0},
            {-0X1P+0,-0X1.1A62633145C06P-53},
            {-0X1.1A62633145C07P-53,-0X1.1A62633145C06P-53},
            {-0X1P+0,-0X1.1A62633145C06P-53},
            {-1.0,0.0},
            {-0X1P+0,0.0},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1P+0,0.0},
            {-0X1P+0,0X1P+0},
            {-0X1P+0,0X1P+0},
            {-1.0,0X1.72CECE675D1FDP-52},
            {-0X1P+0,0X1.72CECE675D1FDP-52},
            {-0X1.1A62633145C07P-53,0X1.72CECE675D1FDP-52},
            {-0X1P+0,0X1.72CECE675D1FDP-52},
            {0X1.72CECE675D1FCP-52,0X1.72CECE675D1FDP-52},
            {-1.0,0X1.72CECE675D1FDP-52},
            {-0X1.E9FB8D64830E3P-3,0X1.DE33739E82D33P-5},
            {-1.0,1.0},
            {-1.0,1.0},
            {0.0,0.0},
            {0.0,0X1P+0},
            {0.0,1.0},
            {0.0,0X1P+0},
            {-0X1.72CECE675D1FDP-52,1.0},
            {-1.0,1.0},
            {0X1.FFFFFFFFFFFFFP-1,0X1P+0},
            {0X1.1A62633145C06P-53,0X1P+0},
            {0X1.FFFFFFFFFFFFFP-1,0X1P+0},
            {-0X1.72CECE675D1FDP-52,0X1P+0},
            {0X1.1A62633145C06P-53,0X1.1A62633145C07P-53},
            {-0X1.72CECE675D1FDP-52,0X1.1A62633145C07P-53},
            {0X1.1A62633145C06P-53,0X1P+0},
            {0X1.FFFFFFFFFFFFFP-1,0X1P+0},
            {-0X1.72CECE675D1FDP-52,0X1P+0},
            {-0X1.72CECE675D1FDP-52,-0X1.72CECE675D1FCP-52},
            {0X1.AED548F090CEEP-1,1.0},
            {0X1.210386DB6D55BP-3,0X1.D18F6EAD1B446P-1},
            empty,
            {-1.0,1.0},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_sin_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 2;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 52;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0X1.921FB54442D18P+0},
            {-0.0,0X1.921FB54442D18P+1},
            {-0.0,0X1.921FB54442D19P+0},
            {-0.0,0X1.921FB54442D19P+1},
            {-0.0,infinity},
            {-0.7,0.1},
            {-0X1.921FB54442D18P+0,-0.0},
            {-0X1.921FB54442D18P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+0,0.0},
            {-0X1.921FB54442D18P+0,0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D18P+1,-0.0},
            {-0X1.921FB54442D18P+1,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+1,-0X1.921FB54442D18P+1},
            {-0X1.921FB54442D18P+1,-0X1.921FB54442D19P+0},
            {-0X1.921FB54442D18P+1,0.0},
            {-0X1.921FB54442D19P+0,-0.0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+1,-0.0},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D18P+1},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+1,-0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0.0},
            {-3.2,-2.9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,0X1.921FB54442D18P+0},
            {0.0,0X1.921FB54442D18P+1},
            {0.0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+1},
            {0.0,infinity},
            {0X1.921FB54442D18P+0,0X1.921FB54442D18P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D18P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D18P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D19P+0,0X1.921FB54442D18P+1},
            {0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D19P+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {1.0,2.0},
            {2.0,3.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {1.0,1.0},
            {0X1.1A62633145C06P-54,1.0},
            {-1.0,1.0},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {0X1.87996529F9D92P-1,1.0},
            {0X1.1A62633145C06P-54,1.0},
            {0X1.1A62633145C06P-54,0X1.1A62633145C07P-54},
            {0X1.1A62633145C06P-54,1.0},
            {0X1.1A62633145C06P-54,1.0},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-1.0,1.0},
            {-1.0,0X1.1A62633145C07P-54},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-1.0,-0X1.72CECE675D1FCP-53},
            {-1.0,1.0},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-0X1.72CECE675D1FDP-53,0X1.1A62633145C07P-54},
            {-0X1.72CECE675D1FDP-53,-0X1.72CECE675D1FCP-53},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-1.0,1.0},
            {-1.0,0X1.1A62633145C07P-54},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-1.0,-0X1.72CECE675D1FCP-53},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-1.0,1.0},
            {-1.0,-0X1.F1216DBA340C8P-1},
            {-1.0,1.0},
            {-1.0,1.0},
            {1.0,1.0},
            {0X1.1A62633145C06P-54,1.0},
            {-1.0,1.0},
            {-0X1.72CECE675D1FDP-53,1.0},
            {-1.0,1.0},
            {-1.0,1.0},
            {0X1.1A62633145C06P-54,0X1.1A62633145C07P-54},
            {-1.0,0X1.1A62633145C07P-54},
            {-0X1.72CECE675D1FDP-53,0X1.1A62633145C07P-54},
            {-1.0,0X1.1A62633145C07P-54},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-1.0,-0X1.72CECE675D1FCP-53},
            {-0X1.72CECE675D1FDP-53,-0X1.72CECE675D1FCP-53},
            {-1.0,-0X1.72CECE675D1FCP-53},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-0X1.AA22657537205P-2,0X1.14A280FB5068CP-1},
            {-0X1.FAE04BE85E5D3P-1,-0X1.AA22657537204P-2},
            empty,
            {-1.0,1.0},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_cos_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 2;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 33;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0X1.921FB54442D18P+0},
            {-0.0,0X1.921FB54442D18P+1},
            {-0.0,0X1.921FB54442D19P+0},
            {-0.0,0X1.921FB54442D19P+1},
            {-0.0,infinity},
            {-0X1.555475A31A4BEP-2,0X1.999999999999AP-4},
            {-0X1.921FB54442D18P+0,0X1.921FB54442D18P+0},
            {-0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,0X1.921FB54442D18P+0},
            {0.0,0X1.921FB54442D18P+1},
            {0.0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+1},
            {0.0,infinity},
            {0X1.4E18E147AE148P+12,0X1.4E2028F5C28F6P+12},
            {0X1.4E18E147AE148P+12,0X1.546028F5C28F6P+12},
            {0X1.921FB54442D18P+0,0X1.921FB54442D18P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+1,0X1.921FB54442D18P+1},
            {0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {0X1.FAE147AE147AEP-1,0X1.028F5C28F5C29P+0},
            {0X1P-51,0X1.921FB54442D18P+1},
            {0X1P-51,0X1.921FB54442D19P+1},
            {0X1P-52,0X1.921FB54442D18P+1},
            {0X1P-52,0X1.921FB54442D19P+1},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0X1.D02967C31CDB5P+53},
            entire,
            entire,
            entire,
            entire,
            {-0X1.628F4FD931FEFP-2,0X1.9AF8877430B81P-4},
            {-0X1.D02967C31CDB5P+53,0X1.D02967C31CDB5P+53},
            entire,
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            {0.0,0X1.D02967C31CDB5P+53},
            entire,
            entire,
            entire,
            entire,
            {-0X1.D6D67B035B6B4P+2,-0X1.7E42B0760E3F3P+0},
            entire,
            {0X1.D02967C31CDB4P+53,0X1.D02967C31CDB5P+53},
            entire,
            {-0X1.1A62633145C07P-53,-0X1.1A62633145C06P-53},
            {-0X1.617A15494767BP+52,-0X1.617A15494767AP+52},
            {0X1.72CECE675D1FCP-52,0X1.72CECE675D1FDP-52},
            {0X1.860FADCC59064P+0,0X1.979AD0628469DP+0},
            entire,
            entire,
            entire,
            entire,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_tan_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 18;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.51EB851EB851FP-2,0X1.FFFFFFFFFFFFFP-1},
            {-0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0X1.FFFFFFFFFFFFFP-1,0X1.FFFFFFFFFFFFFP-1},
            {-1.0,-1.0},
            {-1.0,1.0},
            {-infinity,-0.0},
            {-infinity,-0X1.0000000000001P+0},
            {-infinity,-1.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0X1.0000000000001P+0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0X1.921FB54442D19P+0},
            {-0X1.585FF6E341C3FP-2,0X1.921FB50442D19P+0},
            {-0X1.9A49276037885P-4,0X1.9A49276037885P-4},
            {-0X1.921FB50442D19P+0,0X1.921FB50442D19P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0.0},
            empty,
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {0.0,0.0},
            {0.0,0X1.921FB54442D19P+0},
            empty,
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            empty,
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_asin_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 18;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.51EB851EB851FP-2,0X1.FFFFFFFFFFFFFP-1},
            {-0X1.999999999999AP-4,0X1.999999999999AP-4},
            {-0X1.FFFFFFFFFFFFFP-1,0X1.FFFFFFFFFFFFFP-1},
            {-1.0,-1.0},
            {-1.0,1.0},
            {-infinity,-0.0},
            {-infinity,-0X1.0000000000001P+0},
            {-infinity,-1.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0X1.0000000000001P+0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+0},
            {0X1P-26,0X1.E837B2FD13428P+0},
            {0X1.787B22CE3F59P+0,0X1.ABC447BA464A1P+0},
            {0X1P-26,0X1.921FB52442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            empty,
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+0},
            empty,
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_acos_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 10;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.FD219490EAAC1P+38,-0X1.1AF1C9D74F06DP+9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {1.0,0X1.4C2463567C5ACP+25},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0X1.921FB54442D19P+0},
            {-0X1.921FB54440CEBP+0,-0X1.91ABE5C1E4C6DP+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.921FB54442D19P+0,0.0},
            {0.0,0.0},
            {0.0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P-1,0X1.921FB4E19ABD7P+0},
            empty,
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_atan_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 169;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.0,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            {0.1,1.0},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,1.0},
            {-2.0,-0.0},
            {-2.0,-0.1},
            {-2.0,0.0},
            {-2.0,1.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0.1,1.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            empty,
            empty,
            {0.0,0.0},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0X1.ABA397C7259DDP+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+0},
            {0.0,0X1.789BD2C160054P+0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.8555A2787982P+0,0.0},
            empty,
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.983E282E2CC4CP-4},
            {-0X1.8BBAABDE5E29CP+1,-0X1.921FB54442D18P+0},
            {-0X1.8BBAABDE5E29CP+1,-0X1.9EE9C8100C211P+0},
            {-0X1.8BBAABDE5E29CP+1,-0X1.921FB54442D18P+0},
            {-0X1.8BBAABDE5E29CP+1,-0X1.983E282E2CC4CP-4},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.983E282E2CC4CP-4},
            {-0X1.8555A2787982P+0,-0X1.983E282E2CC4CP-4},
            empty,
            {-0X1.921FB54442D19P+1,0.0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,-0X1.921FB54442D18P+0},
            {-0X1.921FB54442D19P+0,0.0},
            {-0X1.8555A2787982P+0,0.0},
            empty,
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.8555A2787982P+0,0X1.789BD2C160054P+0},
            empty,
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+1,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            {0.0,0.0},
            {0.0,0.0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0X1.ABA397C7259DDP+0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+1},
            {0.0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0.0,0X1.921FB54442D19P+0},
            {0.0,0X1.789BD2C160054P+0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.983E282E2CC4CP-4,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.8BBAABDE5E29CP+1},
            {0X1.ABA397C7259DDP+0,0X1.8BBAABDE5E29CP+1},
            {0X1.921FB54442D18P+0,0X1.8BBAABDE5E29CP+1},
            {0X1.983E282E2CC4CP-4,0X1.8BBAABDE5E29CP+1},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.921FB54442D18P+0,0X1.921FB54442D19P+0},
            {0X1.983E282E2CC4CP-4,0X1.921FB54442D19P+0},
            {0X1.983E282E2CC4CP-4,0X1.789BD2C160054P+0},
            empty,
            {0.0,0X1.921FB54442D19P+1},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            {-0X1.921FB54442D19P+0,0X1.921FB54442D19P+0},
            empty,
            {-0X1.921FB54442D19P+1,0X1.921FB54442D19P+1},
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_atan2_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.199999999999AP+0,0X1.2666666666666P+1},
            {-0X1.FD219490EAAC1P+38,-0X1.1AF1C9D74F06DP+9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {1.0,0X1.2C903022DD7AAP+8},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,infinity},
            {-0X1.55ECFE1B2B215P+0,0X1.3BF72EA61AF1BP+2},
            {-infinity,-0X1.53045B4F849DEP+815},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0X1.2CD9FC44EB982P+0,0X1.89BCA168970C6P+432},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_sinh_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.199999999999AP+0,0X1.2666666666666P+1},
            {-0X1.FD219490EAAC1P+38,-0X1.1AF1C9D74F06DP+9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {1.0,0X1.2C903022DD7AAP+8},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {1.0,1.0},
            {1.0,infinity},
            {1.0,0X1.4261D2B7D6181P+2},
            {0X1.53045B4F849DEP+815,infinity},
            {1.0,infinity},
            {1.0,infinity},
            {1.0,1.0},
            {1.0,infinity},
            {0X1.8B07551D9F55P+0,0X1.89BCA168970C6P+432},
            empty,
            {1.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_cosh_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 2;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.199999999999AP+0,0X1.2666666666666P+1},
            {-0X1.FD219490EAAC1P+38,-0X1.1AF1C9D74F06DP+9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {1.0,0X1.2C903022DD7AAP+8},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,1.0},
            {-0X1.99DB01FDE2406P-1,0X1.F5CF31E1C8103P-1},
            {-0X1P+0,-0X1.FFFFFFFFFFFFFP-1},
            {-1.0,0.0},
            {-1.0,0.0},
            {0.0,0.0},
            {0.0,1.0},
            {0X1.85EFAB514F394P-1,0X1P+0},
            empty,
            {-1.0,1.0},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_tanh_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 2;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.199999999999AP+0,0X1.2666666666666P+1},
            {-0X1.FD219490EAAC1P+38,-0X1.1AF1C9D74F06DP+9},
            {-infinity,-0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {1.0,0X1.2C903022DD7AAP+8},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,infinity},
            {-0X1.E693DF6EDF1E7P-1,0X1.91FDC64DE0E51P+0},
            {-0X1.BB86380A6CC45P+4,-0X1.C204D8EB20827P+2},
            {-infinity,0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0X1.C34366179D426P-1,0X1.9986127438A87P+2},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_asinh_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,infinity},
            {-infinity,0X1.FFFFFFFFFFFFFP-1},
            {-infinity,1.0},
            {0.0,infinity},
            {0X1.14D4E82B2B26FP+15,0X1.72DBE91C837B5P+29},
            {0X1.199999999999AP+0,0X1.2666666666666P+1},
            {1.0,0X1.2C903022DD7AAP+8},
            {1.0,1.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,infinity},
            empty,
            {0.0,0.0},
            {0.0,infinity},
            {0X1.656510B4BAEC3P+3,0X1.52A415EE8455AP+4},
            {0X1.C636C1A882F2CP-2,0X1.799C88E79140DP+0},
            {0.0,0X1.9985FB3D532AFP+2},
            {0.0,0.0},
            {0.0,infinity},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_acosh_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 15;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,infinity},
            {-0X1.FFB88E9EB6307P-1,0X1.999999999999AP-4},
            {-1.0,-1.0},
            {-1.0,1.0},
            {-infinity,-0.0},
            {-infinity,-1.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0X1.4C0420F6F08CCP-2,0X1.FFFFFFFFFFFFFP-1},
            {1.0,1.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,infinity},
            {-0X1.06A3A97D7979CP+2,0X1.9AF93CD234413P-4},
            empty,
            entire,
            {-infinity,0.0},
            empty,
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {0X1.5871DD2DF9102P-2,0X1.2B708872320E2P+4},
            empty,
            empty,
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_atanh_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 11;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0.0,2.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-5.0,-2.0},
            {0.0,0.0},
            {0.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.0},
            {0.0,0.0},
            {0.0,1.0},
            {-1.0,0.0},
            {-1.0,1.0},
            {-1.0,-1.0},
            {0.0,0.0},
            {0.0,1.0},
            {1.0,1.0},
            empty,
            {-1.0,1.0},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_sign_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 15;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,2.2},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,2.2},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {-infinity,2.2},
            {0.0,2.2},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {1.1,2.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,3.0},
            {-1.0,3.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-1.0,infinity},
            {-1.0,3.0},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {-infinity,3.0},
            {0.0,3.0},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            {2.0,2.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_ceil_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 13;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,2.2},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,2.2},
            {-infinity,2.2},
            {0.0,2.2},
            {1.1,2.0},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,2.0},
            {-1.0,2.0},
            {-2.0,0.0},
            {-2.0,-1.0},
            {-2.0,0.0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-2.0,2.0},
            {-infinity,2.0},
            {0.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_floor_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 13;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,2.2},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,2.2},
            {-infinity,2.2},
            {0.0,2.2},
            {1.1,2.1},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,2.0},
            {-1.0,2.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-1.0,infinity},
            {-1.0,2.0},
            {-infinity,2.0},
            {0.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_trunc_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 18;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,2.5},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,-0.5},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,2.0},
            {-1.5,2.5},
            {-1.5,infinity},
            {-1.9,2.2},
            {-1.9,2.5},
            {-infinity,2.2},
            {0.0,2.5},
            {1.1,2.1},
            {1.5,2.1},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,2.0},
            {-1.0,2.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-2.0,infinity},
            {-2.0,2.0},
            {-2.0,2.0},
            {-infinity,2.0},
            {0.0,2.0},
            {1.0,2.0},
            {2.0,2.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_roundTiesToEven_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 18;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,2.5},
            {-1.0,2.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,-0.5},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,2.5},
            {-1.5,infinity},
            {-1.9,2.2},
            {-1.9,2.5},
            {-2.5,2.0},
            {-infinity,2.2},
            {0.0,2.5},
            {0.5,2.1},
            {1.1,2.1},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,3.0},
            {-1.0,2.0},
            {-1.0,-0.0},
            {-1.0,0.0},
            {-1.0,-1.0},
            {-1.0,0.0},
            {-1.0,2.0},
            {-2.0,3.0},
            {-2.0,infinity},
            {-2.0,2.0},
            {-2.0,3.0},
            {-3.0,2.0},
            {-infinity,2.0},
            {0.0,3.0},
            {1.0,2.0},
            {1.0,2.0},
            empty,
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_roundTiesToAway_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 12;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,0.2},
            {-1.1,-0.0},
            {-1.1,-0.4},
            {-1.1,0.0},
            {-1.1,2.0},
            {-1.5,infinity},
            {-1.9,0.2},
            {-infinity,-2.2},
            {0.0,0.2},
            {1.1,2.1},
            empty,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0.2},
            {0.0,1.1},
            {0.4,1.1},
            {0.0,1.1},
            {0.0,2.0},
            {0.0,infinity},
            {0.0,1.9},
            {2.2,infinity},
            {0.0,0.2},
            {1.1,2.1},
            empty,
            {0.0,infinity},
        }};

        I *d_res = (I *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_abs_call(numBlocks, blockSize, stream, n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 15;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,5.0},
            {-7.0,-0.0},
            {-7.0,-5.0},
            {-7.0,0.0},
            {0.0,5.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            empty,
            empty,
            empty,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            {2.0,4.0},
            {2.0,4.0},
            {2.0,4.0},
            {2.0,4.0},
            {2.0,4.0},
            empty,
            entire,
            {2.0,4.0},
            {2.0,8.0},
            entire,
            {1.0,2.0},
            empty,
            entire,
            {1.0,2.0},
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,4.0},
            {-7.0,0.0},
            {-7.0,-5.0},
            {-7.0,0.0},
            {0.0,4.0},
            empty,
            {-infinity,2.0},
            {1.0,4.0},
            {1.0,5.0},
            {-infinity,5.0},
            empty,
            empty,
            empty,
            {-infinity,2.0},
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_min_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    {
        char *h_buffer = buffer.host;
        constexpr int n = 15;
        I *h_xs = new (h_buffer) I[n]{
            {-1.0,5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {-7.0,-5.0},
            {1.0,2.0},
            {1.0,2.0},
            {1.0,5.0},
            {1.0,5.0},
            empty,
            empty,
            empty,
            entire,
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_ys = new (h_buffer) I[n]{
            entire,
            {-0.0,4.0},
            {-2.0,-0.0},
            {-2.0,0.0},
            {0.0,4.0},
            {2.0,4.0},
            empty,
            entire,
            {2.0,4.0},
            {2.0,8.0},
            {1.0,2.0},
            empty,
            entire,
            {1.0,2.0},
            entire,
        };

        h_buffer += align_to(n * sizeof(I), alignof(I));
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-1.0,infinity},
            {0.0,4.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {0.0,4.0},
            {2.0,4.0},
            empty,
            {1.0,infinity},
            {2.0,5.0},
            {2.0,8.0},
            empty,
            empty,
            empty,
            {1.0,infinity},
            entire,
        }};

        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_max_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaEventRecord(event, stream));
        CUDA_CHECK(cudaEventSynchronize(event));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

}