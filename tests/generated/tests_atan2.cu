// NOTE: This file is automatically generated by test_converter.py using itl tests.

#include <cuinterval/cuinterval.h>

#include "../test_ops.cuh"
#include "../tests.h"
#include "../tests_common.cuh"

template<typename T>
void tests_atan2(cuda_buffers buffers, cudaStream_t stream) {
    using namespace boost::ut;

    using I = interval<T>;
    using B = bool;
    using N = int;

    T infinity = std::numeric_limits<T>::infinity();
    I empty    = { infinity, -infinity };
    I entire   = { -infinity, infinity };
    T NaN = ::nan("");

    const int n = 37; // count of largest test array
    const int n_bytes   = n * sizeof(I);
    const int blockSize = 256;
    [[maybe_unused]] const int numBlocks = (n + blockSize - 1) / blockSize;

    char *d_buffer = buffers.device;
    char *h_buffer = buffers.host;

    I *d_xs_  = (I *) d_buffer;
    I *d_ys_  = (I *) d_buffer + 1 * n_bytes;
    I *d_zs_  = (I *) d_buffer + 2 * n_bytes;
    I *d_res_ = (I *) d_buffer + 3 * n_bytes;

    "minimal.atan2_atan2"_test = [&] {
        constexpr int n = 37;
        I *h_xs = new (h_buffer) I[n]{
            {-0x1p-1022,-0x1p-1022},
            {-0x1p-1022,0.0},
            {-0x1p-1022,0x1p-1022},
            {-0x1p-1022,0x1p-1022},
            {-1.0,-1.0},
            {-1.0,-1.0},
            {-2.0,0.0},
            {-2.0,0.0},
            {-2.0,2.0},
            {-2.0,2.0},
            {-3.0,-1.0},
            {-3.0,-1.0},
            {-3.0,-1.0},
            {-3.0,-1.0},
            {-3.0,-1.0},
            {-5.0,0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,0.0},
            {0.0,2.0},
            {0.0,2.0},
            {0.0,5.0},
            {0.0,5.0},
            {0.0,infinity},
            {0x1p-1022,0x1p-1022},
            {1.0,1.0},
            {1.0,1.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            {1.0,3.0},
            empty,
            empty,
            entire,
            entire,
        };

        h_buffer += n * sizeof(I);
        I *h_ys = new (h_buffer) I[n]{
            {-0x1p-1022,0x1p-1022},
            {-0x1p-1022,-0x1p-1022},
            {-0x1p-1022,-0x1p-1022},
            {0x1p-1022,0x1p-1022},
            {-1.0,-1.0},
            {1.0,1.0},
            {-3.0,-1.0},
            {1.0,3.0},
            {-3.0,-1.0},
            {1.0,3.0},
            {-2.0,0.0},
            {-2.0,2.0},
            {-3.0,-1.0},
            {0.0,2.0},
            {1.0,3.0},
            {-5.0,0.0},
            {0.0,0.0},
            {-infinity,0.0},
            {0.0,0.0},
            {0.0,infinity},
            {-3.0,-1.0},
            {1.0,3.0},
            {-5.0,0.0},
            {0.0,5.0},
            {0.0,0.0},
            {-0x1p-1022,0x1p-1022},
            {-1.0,-1.0},
            {1.0,1.0},
            {-2.0,0.0},
            {-2.0,2.0},
            {-3.0,-1.0},
            {0.0,2.0},
            {1.0,3.0},
            empty,
            entire,
            empty,
            entire,
        };

        h_buffer += n * sizeof(I);
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-0x1.2D97C7F3321D3p1,-0x1.921FB54442D18p-1},
            {-0x1.921FB54442D19p1,+0x1.921FB54442D19p1},
            {-0x1.921FB54442D19p1,+0x1.921FB54442D19p1},
            {-0x1.921FB54442D19p-1,+0x1.921FB54442D19p-1},
            {-0x1.2D97C7F3321D3p1,-0x1.2D97C7F3321D2p1},
            {-0x1.921FB54442D19p-1,-0x1.921FB54442D18p-1},
            {-0x1.921FB54442D19p1,+0x1.921FB54442D19p1},
            {-0x1.1B6E192EBBE45p0,0x0p0},
            {-0x1.921FB54442D19p1,+0x1.921FB54442D19p1},
            {-0x1.1B6E192EBBE45p0,+0x1.1B6E192EBBE45p0},
            {-0x1.56C6E7397F5AFp1,-0x1.921FB54442D18p0},
            {-0x1.56C6E7397F5AFp1,-0x1.DAC670561BB4Fp-2},
            {-0x1.68F095FDF593Dp1,-0x1.E47DF3D0DD4Dp0},
            {-0x1.921FB54442D19p0,-0x1.DAC670561BB4Fp-2},
            {-0x1.3FC176B7A856p0,-0x1.4978FA3269EE1p-2},
            {-0x1.921FB54442D19p1,+0x1.921FB54442D19p1},
            {-0x1.921FB54442D19p0,-0x1.921FB54442D18p0},
            {0x1.921FB54442D18p1,0x1.921FB54442D19p1},
            empty,
            {0.0,0.0},
            {0x1.0468A8ACE4DF6p1,0x1.921FB54442D19p1},
            {0x0p0,0x1.1B6E192EBBE45p0},
            {0x1.921FB54442D18p0,0x1.921FB54442D19p1},
            {0x0p0,0x1.921FB54442D19p0},
            {0x1.921FB54442D18p0,0x1.921FB54442D19p0},
            {0x1.921FB54442D18p-1,0x1.2D97C7F3321D3p1},
            {0x1.2D97C7F3321D2p1,0x1.2D97C7F3321D3p1},
            {0x1.921FB54442D18p-1,0x1.921FB54442D19p-1},
            {0x1.921FB54442D18p0,0x1.56C6E7397F5AFp1},
            {0x1.DAC670561BB4Fp-2,0x1.56C6E7397F5AFp1},
            {0x1.E47DF3D0DD4Dp0,0x1.68F095FDF593Dp1},
            {0x1.DAC670561BB4Fp-2,0x1.921FB54442D19p0},
            {0x1.4978FA3269EE1p-2,0x1.3FC176B7A856p0},
            empty,
            empty,
            empty,
            {-0x1.921FB54442D19p1,+0x1.921FB54442D19p1},
        }};

        h_buffer += n * sizeof(I);
        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_res, h_res, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        test_atan2<<<numBlocks, blockSize, 0, stream>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaDeviceSynchronize());        int max_ulp_diff = 3;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

}