// NOTE: This file is automatically generated by test_converter.py using itl tests.

#include <cuinterval/cuinterval.h>

#include "../test_ops.cuh"
#include "../tests.h"
#include "../tests_common.cuh"

template<typename T>
void tests_libieeep1788_rec_bool(cuda_buffers buffers, cudaStream_t stream) {
    using namespace boost::ut;

    using I = interval<T>;
    using B = bool;
    using N = int;

    T infinity = std::numeric_limits<T>::infinity();
    I empty    = { infinity, -infinity };
    I entire   = { -infinity, infinity };
    T NaN = ::nan("");

    const int n = 35; // count of largest test array
    const int n_bytes   = n * sizeof(I);
    const int blockSize = 256;
    [[maybe_unused]] const int numBlocks = (n + blockSize - 1) / blockSize;

    char *d_buffer = buffers.device;
    char *h_buffer = buffers.host;

    I *d_xs_  = (I *) d_buffer;
    I *d_ys_  = (I *) d_buffer + 1 * n_bytes;
    I *d_zs_  = (I *) d_buffer + 2 * n_bytes;
    I *d_res_ = (I *) d_buffer + 3 * n_bytes;

    "minimal_is_common_interval_isCommonInterval"_test = [&] {
        constexpr int n = 12;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0.0},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-27.0,-27.0},
            {-27.0,0.0},
            {-infinity,0.0},
            {0.0,-0.0},
            {0.0,0.0},
            {0.0,infinity},
            {5.0,12.4},
            empty,
            entire,
        };

        h_buffer += n * sizeof(I);
        B *h_res = new (h_buffer) B[n]{};
        std::array<B, n> h_ref {{
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
        }};

        h_buffer += n * sizeof(B);
        B *d_res = (B *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_res, h_res, n*sizeof(B), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        test_isCommonInterval<<<numBlocks, blockSize, 0, stream>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(B), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaDeviceSynchronize());        int max_ulp_diff = 0;
        check_all_equal<B, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    "minimal_is_singleton_isSingleton"_test = [&] {
        constexpr int n = 15;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,-0.0},
            {-0.0,0.0},
            {-1.0,-0.5},
            {-1.0,0.0},
            {-1.0,infinity},
            {-2.0,-2.0},
            {-27.0,-27.0},
            {-infinity,-0x1.FFFFFFFFFFFFFp1023},
            {0.0,-0.0},
            {0.0,0.0},
            {1.0,2.0},
            {12.0,12.0},
            {17.1,17.1},
            empty,
            entire,
        };

        h_buffer += n * sizeof(I);
        B *h_res = new (h_buffer) B[n]{};
        std::array<B, n> h_ref {{
            true,
            true,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
        }};

        h_buffer += n * sizeof(B);
        B *d_res = (B *)d_res_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_res, h_res, n*sizeof(B), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        test_isSingleton<<<numBlocks, blockSize, 0, stream>>>(n, d_xs, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(B), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaDeviceSynchronize());        int max_ulp_diff = 0;
        check_all_equal<B, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs);
    };

    "minimal_is_member_isMember"_test = [&] {
        constexpr int n = 35;
        T *h_xs = new (h_buffer) T[n]{
            -0.0,
            -0.01,
            -0x1.0p-1022,
            -0x1.FFFFFFFFFFFFFp1023,
            -27.0,
            -27.0,
            -4535.3,
            -6.3,
            -7.0,
            -71.0,
            -infinity,
            -infinity,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.000001,
            0.1,
            0x1.0p-1022,
            0x1.FFFFFFFFFFFFFp1023,
            111110.0,
            12.4,
            12.4,
            4.9,
            5.0,
            5.0,
            6.3,
            6.3,
            NaN,
            NaN,
            infinity,
            infinity,
        };

        h_buffer += n * sizeof(T);
        I *h_ys = new (h_buffer) I[n]{
            {0.0,0.0},
            {0.0,0.0},
            entire,
            entire,
            {-27.0,-27.0},
            {-27.0,0.0},
            empty,
            {5.0,12.4},
            {-27.0,0.0},
            {-27.0,0.0},
            empty,
            entire,
            {-0.0,-0.0},
            {-0.0,0.0},
            {-27.0,0.0},
            {0.0,-0.0},
            {0.0,0.0},
            empty,
            entire,
            {0.0,0.0},
            {-27.0,0.0},
            entire,
            entire,
            {-0.0,-0.0},
            {5.0,12.4},
            entire,
            {5.0,12.4},
            {5.0,12.4},
            entire,
            {5.0,12.4},
            entire,
            empty,
            entire,
            empty,
            entire,
        };

        h_buffer += n * sizeof(I);
        B *h_res = new (h_buffer) B[n]{};
        std::array<B, n> h_ref {{
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
        }};

        h_buffer += n * sizeof(B);
        B *d_res = (B *)d_res_;
        I *d_ys = (I *)d_ys_;
        T *d_xs = (T *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_res, h_res, n*sizeof(B), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(T), cudaMemcpyHostToDevice, stream));
        test_isMember<<<numBlocks, blockSize, 0, stream>>>(n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(B), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaDeviceSynchronize());        int max_ulp_diff = 0;
        check_all_equal<B, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

}