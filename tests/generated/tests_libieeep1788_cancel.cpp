// NOTE: This file is automatically generated by test_converter.py using itl tests.


#include "../tests.h"
#include "../tests_common.h"
#include "../tests_ops.h"

#include <omp.h>

void tests_libieeep1788_cancel(cuda_buffer buffer, cudaStream_t stream) {
    using namespace boost::ut;

    using T = double;
    using I = interval<T>;
    using B = bool;
    using N = int;

    T infinity = std::numeric_limits<T>::infinity();
    I empty    = { infinity, -infinity };
    I entire   = { -infinity, infinity };
    T NaN = ::nan("");

    const int n = 63; // count of largest test array
    const int n_bytes   = n * sizeof(I);
    const int blockSize = 256;
    [[maybe_unused]] const int numBlocks = (n + blockSize - 1) / blockSize;

    char *d_buffer = buffer.device;
    char *h_buffer = buffer.host;

    I *d_xs_  = (I *) d_buffer;
    I *d_ys_  = (I *) d_buffer + 1 * n_bytes;
    I *d_zs_  = (I *) d_buffer + 2 * n_bytes;
    I *d_res_ = (I *) d_buffer + 3 * n_bytes;

    "minimal_cancel_plus_cancelPlus"_test = [&] {
        constexpr int n = 58;
        I *h_xs = new (h_buffer) I[n]{
            {-0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFEP+1023,0x1.FFFFFFFFFFFFFp1023},
            {-0X1P+0,0X1.FFFFFFFFFFFFEP-53},
            {-0X1P+0,0X1.FFFFFFFFFFFFFP-53},
            {-0x1.FFFFFFFFFFFFFp1023,0X1.FFFFFFFFFFFFEP+1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-1.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.1},
            {-10.1,5.0},
            {-10.1,5.1},
            {-5.0,-0.9},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.1,-0.0},
            {-5.1,-0.9},
            {-5.1,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {0.0,5.0},
            {0.0,5.1},
            {0.9,5.0},
            {0.9,5.1},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.1},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += n * sizeof(I);
        I *h_ys = new (h_buffer) I[n]{
            {-0X1.999999999999AP-4,0.01},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0X1P+0,0X1.FFFFFFFFFFFFFP-53},
            {-0X1P+0,0X1.FFFFFFFFFFFFEP-53},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0X1.FFFFFFFFFFFFEP+1023,0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,0X1.FFFFFFFFFFFFEP+1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-infinity,1.0},
            {1.0,infinity},
            entire,
            {-5.0,1.0},
            empty,
            entire,
            empty,
            {-5.0,10.0},
            {-5.0,10.1},
            {-5.1,10.0},
            {-5.1,10.1},
            empty,
            {-5.0,10.0},
            {-5.0,10.0},
            {-5.0,10.0},
            {1.0,5.0},
            {0.9,5.0},
            {0.9,5.1},
            {1.0,5.0},
            {1.0,5.1},
            {0.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {-5.0,1.0},
            empty,
            entire,
            {-5.0,-0.0},
            {-5.0,-0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-0X1.999999999999AP-4,-0X1.999999999999AP-4},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-5.0,-0.9},
            {-5.0,-1.0},
            {-5.1,-0.9},
            {-5.1,-1.0},
            empty,
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,10.0},
            {-infinity,1.0},
            {1.0,10.0},
            {1.0,infinity},
            empty,
            entire,
            {-5.0,1.0},
            {-infinity,1.0},
            {1.0,infinity},
            empty,
            entire,
        };

        h_buffer += n * sizeof(I);
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {-0X1.70A3D70A3D70BP-4,0X1.E666666666657P+0},
            entire,
            entire,
            {-0X1.FFFFFFFFFFFFFP-1,-0X1.FFFFFFFFFFFFEP-1},
            entire,
            {0.0,0X1P+971},
            {-0X1P+971,0.0},
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            {0.0,0X1.999999999998P-4},
            {-0X1.999999999998P-4,0.0},
            {-0X1.999999999998P-4,0X1.999999999998P-4},
            {0.0,0X1.9999999999998P-4},
            entire,
            entire,
            {0.0,0.0},
            entire,
            {-0X1.999999999998P-4,0.0},
            {-0X1.999999999998P-4,0X1.9999999999998P-4},
            {-0X1.999999999998P-4,0.0},
            entire,
            entire,
            entire,
            {0.0,0.0},
            {0.0,0X1.999999999998P-4},
            {-0X1.9999999999998P-4,0.0},
            {-0X1.9999999999998P-4,0X1.999999999998P-4},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            entire,
            {0.0,0.0},
            entire,
            entire,
            entire,
            {0.0,0X1.999999999998P-4},
            empty,
            empty,
            entire,
            empty,
            entire,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        h_buffer += n * sizeof(I);
        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_res, h_res, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_cancelPlus_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaStreamSynchronize(stream));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

    "minimal_cancel_minus_cancelMinus"_test = [&] {
        constexpr int n = 63;
        I *h_xs = new (h_buffer) I[n]{
            {-0.0,5.1},
            {-0X1.999999999999AP-4,0X1.FFFFFFFFFFFFP+0},
            {-0X1.FFFFFFFFFFFFEP+1023,0x1.FFFFFFFFFFFFFp1023},
            {-0X1P+0,0X1.FFFFFFFFFFFFEP-53},
            {-0X1P+0,0X1.FFFFFFFFFFFFFP-53},
            {-0x1.FFFFFFFFFFFFFp1023,0X1.FFFFFFFFFFFFEP+1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,5.0},
            {-1.0,infinity},
            {-1.0,infinity},
            {-1.0,infinity},
            {-10.0,-1.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.1},
            {-10.1,5.0},
            {-10.1,5.1},
            {-5.0,-0.9},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-5.0,0.0},
            {-5.0,1.0},
            {-5.1,-0.0},
            {-5.1,-0.9},
            {-5.1,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {-infinity,-1.0},
            {0.9,5.0},
            {0.9,5.1},
            {0X1.FFFFFFFFFFFFP+0,0X1.FFFFFFFFFFFFP+0},
            {0X1P-1022,0X1.0000000000001P-1022},
            {0X1P-1022,0X1.0000000000002P-1022},
            {0x0.0000000000001p-1022,0x0.0000000000001p-1022},
            {0x0.0000000000001p-1022,0x0.0000000000001p-1022},
            {0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.0},
            {1.0,5.1},
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
        };

        h_buffer += n * sizeof(I);
        I *h_ys = new (h_buffer) I[n]{
            {0.0,5.0},
            {-0.01,0X1.999999999999AP-4},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0X1.FFFFFFFFFFFFFP-53,0X1P+0},
            {-0X1.FFFFFFFFFFFFEP-53,0X1P+0},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-0X1.FFFFFFFFFFFFEP+1023,0x1.FFFFFFFFFFFFFp1023},
            {-0x1.FFFFFFFFFFFFFp1023,0X1.FFFFFFFFFFFFEP+1023},
            {-0x1.FFFFFFFFFFFFFp1023,0x1.FFFFFFFFFFFFFp1023},
            {-1.0,infinity},
            {-infinity,-1.0},
            entire,
            {-1.0,5.0},
            empty,
            entire,
            empty,
            {-10.0,5.0},
            {-10.0,5.1},
            {-10.1,5.0},
            {-10.1,5.1},
            empty,
            {-10.0,5.0},
            {-10.0,5.0},
            {-10.0,5.0},
            {-5.0,-1.0},
            {-5.0,-0.9},
            {-5.0,-1.0},
            {-5.1,-0.9},
            {-5.1,-1.0},
            {-0.0,5.0},
            {-1.0,5.0},
            {-5.0,0.0},
            {-5.0,-1.0},
            {-5.0,-1.0},
            {-1.0,5.0},
            empty,
            entire,
            {1.0,5.0},
            {1.0,5.0},
            {0X1.999999999999AP-4,0X1.999999999999AP-4},
            {0X1P-1022,0X1.0000000000002P-1022},
            {0X1P-1022,0X1.0000000000001P-1022},
            {-0x0.0000000000001p-1022,-0x0.0000000000001p-1022},
            {0x0.0000000000001p-1022,0x0.0000000000001p-1022},
            {-0x1.FFFFFFFFFFFFFp1023,-0x1.FFFFFFFFFFFFFp1023},
            {0.9,5.0},
            {0.9,5.1},
            {1.0,5.0},
            {1.0,5.1},
            empty,
            {1.0,5.0},
            {-1.0,infinity},
            {-10.0,-1.0},
            {-10.0,5.0},
            {-infinity,-1.0},
            {1.0,5.0},
            empty,
            entire,
            {-1.0,5.0},
            {-1.0,infinity},
            {-infinity,-1.0},
            empty,
            entire,
        };

        h_buffer += n * sizeof(I);
        I *h_res = new (h_buffer) I[n]{};
        std::array<I, n> h_ref {{
            {0.0,0X1.999999999998P-4},
            {-0X1.70A3D70A3D70BP-4,0X1.E666666666657P+0},
            entire,
            entire,
            {-0X1.FFFFFFFFFFFFFP-1,-0X1.FFFFFFFFFFFFEP-1},
            entire,
            {-0X1P+971,0.0},
            {0.0,0X1P+971},
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
            {0.0,0.0},
            entire,
            entire,
            entire,
            entire,
            {0.0,0X1.999999999998P-4},
            {-0X1.999999999998P-4,0.0},
            {-0X1.999999999998P-4,0X1.999999999998P-4},
            {0.0,0X1.9999999999998P-4},
            entire,
            {0.0,0.0},
            entire,
            entire,
            {-5.0,-5.0},
            {-4.0,-4.0},
            {-0X1.999999999998P-4,0.0},
            {-0X1.999999999998P-4,0X1.9999999999998P-4},
            {-0X1.999999999998P-4,0.0},
            entire,
            entire,
            entire,
            {-0X1.9999999999998P-4,0.0},
            {-0X1.9999999999998P-4,0X1.999999999998P-4},
            {0X1.E666666666656P+0,0X1.E666666666657P+0},
            entire,
            {0.0,0X0.0000000000001P-1022},
            {0x0.0000000000002p-1022,0x0.0000000000002p-1022},
            {0.0,0.0},
            {0x1.FFFFFFFFFFFFFp1023,infinity},
            entire,
            entire,
            {0.0,0.0},
            entire,
            entire,
            {0.0,0X1.999999999998P-4},
            entire,
            empty,
            empty,
            entire,
            empty,
            empty,
            entire,
            entire,
            entire,
            entire,
            entire,
            entire,
        }};

        h_buffer += n * sizeof(I);
        I *d_res = (I *)d_res_;
        I *d_ys = (I *)d_ys_;
        I *d_xs = (I *)d_xs_;
        CUDA_CHECK(cudaMemcpyAsync(d_res, h_res, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_ys, h_ys, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        CUDA_CHECK(cudaMemcpyAsync(d_xs, h_xs, n*sizeof(I), cudaMemcpyHostToDevice, stream));
        tests_cancelMinus_call(numBlocks, blockSize, stream, n, d_xs, d_ys, d_res);
        CUDA_CHECK(cudaMemcpyAsync(h_res, d_res, n*sizeof(I), cudaMemcpyDeviceToHost, stream));
        CUDA_CHECK(cudaStreamSynchronize(stream));
        int max_ulp_diff = 0;
        check_all_equal<I, n>(h_res, h_ref, max_ulp_diff, std::source_location::current(), h_xs, h_ys);
    };

}